from django.contrib.auth import get_user_model
from django.urls import reverse
from rest_framework.test import APITestCase
from rest_framework import status
from django.contrib.auth.models import Permission

User = get_user_model()

class BasicUserViewSetTestCase(APITestCase):
    def setUp(self):
        # Create a test user
        self.user = User.objects.create_user(
            username="testuser",
            email="testuser@example.com",
            first_name="Test",
            last_name="User",
        )
        self.user.set_password("password123")
        self.user.save()

        # Assign permission to the user
        permission = Permission.objects.get(codename="view_api_user_kb")
        self.user.user_permissions.add(permission)

        # Authenticate the user
        self.client.login(username="testuser", password="password123")

        # Create additional users
        self.other_user = User.objects.create_user(
            username="otheruser",
            email="otheruser@example.com",
            first_name="Other",
            last_name="User",
        )

        self.url = reverse("user-list")  # Replace with the actual name of your viewset's list route

    def test_access_without_permission(self):
        # Remove permission
        self.user.user_permissions.clear()
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)

    def test_access_with_permission(self):
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)

    def test_filter_by_email(self):
        response = self.client.get(self.url, {"email": "testuser@example.com"})
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)
        self.assertEqual(response.data[0]["email"], "testuser@example.com")

    def test_filter_by_username(self):
        response = self.client.get(self.url, {"username": "otheruser"})
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)
        self.assertEqual(response.data[0]["username"], "otheruser")

    def test_filter_with_nonexistent_email(self):
        response = self.client.get(self.url, {"email": "nonexistent@example.com"})
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 0)

    def test_no_filters(self):
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 2)  # Ensure it returns all users

    def test_correct_fields_in_response(self):
        response = self.client.get(self.url, {"email": "testuser@example.com"})
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertIn("uuid", response.data[0])
        self.assertIn("username", response.data[0])
        self.assertNotIn("phone", response.data[0])  # Ensure excluded fields are not present

    def test_access_without_authentication(self):
        self.client.logout()
        response = self.client.get(self.url)
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)
