{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#peopledepot","title":"PeopleDepot","text":"<p>PeopleDepot is a project of Hack for LA/Civic Tech Structure Inc. 501(c)(3). PeopleDepot aims to provide a single source of truth as the backend infrastructure and data store for Hack for LA projects, including data about people, program areas, and projects. PeopleDepot uses PostgreSQL for its database and Django as the backend data model framework with Django REST Framework for the API layer. PeopleDepot's goal is to serve as a repository of information for other infrastructure projects (e.g., VRMS, Hack for LA Website, Civic Tech Index, Tables, etc).</p>"},{"location":"#project-context","title":"Project context","text":"<p>The hardest part about running a large organization using only free or open source tools and technologies is how to manage the flow of information and provide relevant info to all the people and projects that need it. Managing multiple databases inefficiently can end up taking more time than the projects themselves. This project seeks to create a maintainable database infrastructure that is synchronized.</p> <p>In the process, it should allow for further automation and do away with manual storage of duplicate information across projects, which includes:</p> <ul> <li>Recruiting members (Website: Project info and meeting times)</li> <li>Onboarding members to resources (e.g., GitHub, Google Calendar, Google Drive, Google Docs, Google Sheets, etc.)</li> <li>Helping members find roles (Civic Tech Jobs: roles and project info)</li> <li>Managing team permissions (VRMS: GitHub, Google Calendar, Google Drives, etc.)</li> </ul>"},{"location":"#technology-used","title":"Technology used","text":"<ul> <li>Docker</li> <li>Django</li> <li>DjangoRestFramework</li> <li>PostgreSQL</li> </ul>"},{"location":"#how-to-contribute","title":"How to contribute","text":"<ol> <li>Join our organization by going through Hack for LA Onboarding. It's free to join!</li> <li>Read the onboarding section of our Wiki.</li> <li>Read our Contributing Guidelines and follow the instructions there.</li> </ol>"},{"location":"#contact-info","title":"Contact info","text":"<p>Contact us in the <code>#people-depot</code> channel on Slack.</p>"},{"location":"#licensing","title":"Licensing","text":"<p>This repository uses the GNU General Public License (v2.0).</p>"},{"location":"license/","title":"License","text":"<pre><code>                GNU GENERAL PUBLIC LICENSE\n                   Version 2, June 1991\n</code></pre> <p>Copyright (C) 1989, 1991 Free Software Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA  Everyone is permitted to copy and distribute verbatim copies  of this license document, but changing it is not allowed.</p> <pre><code>                        Preamble\n</code></pre> <p>The licenses for most software are designed to take away your freedom to share and change it.  By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.  This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it.  (Some other Free Software Foundation software is covered by the GNU Lesser General Public License instead.)  You can apply it to your programs, too.</p> <p>When we speak of free software, we are referring to freedom, not price.  Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things.</p> <p>To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it.</p> <p>For example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have.  You must make sure that they, too, receive or can get the source code.  And you must show them these terms so they know their rights.</p> <p>We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software.</p> <p>Also, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software.  If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations.</p> <p>Finally, any free program is threatened constantly by software patents.  We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary.  To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p> <pre><code>                GNU GENERAL PUBLIC LICENSE\n</code></pre> <p>TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION</p> <ol> <li>This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License.  The \"Program\", below, refers to any such program or work, and a \"work based on the Program\" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language.  (Hereinafter, translation is included without limitation in the term \"modification\".)  Each licensee is addressed as \"you\".</li> </ol> <p>Activities other than copying, distribution and modification are not covered by this License; they are outside its scope.  The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does.</p> <ol> <li>You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program.</li> </ol> <p>You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.</p> <ol> <li> <p>You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:</p> <p>a) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change.</p> <p>b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License.</p> <p>c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License.  (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.)</p> </li> </ol> <p>These requirements apply to the modified work as a whole.  If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works.  But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.</p> <p>Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program.</p> <p>In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.</p> <ol> <li> <p>You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following:</p> <p>a) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,</p> <p>b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,</p> <p>c) Accompany it with the information you received as to the offer to distribute corresponding source code.  (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.)</p> </li> </ol> <p>The source code for a work means the preferred form of the work for making modifications to it.  For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable.  However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.</p> <p>If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code.</p> <ol> <li> <p>You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License.  Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.</p> </li> <li> <p>You are not required to accept this License, since you have not signed it.  However, nothing else grants you permission to modify or distribute the Program or its derivative works.  These actions are prohibited by law if you do not accept this License.  Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it.</p> </li> <li> <p>Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions.  You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License.</p> </li> <li> <p>If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License.  If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all.  For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program.</p> </li> </ol> <p>If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances.</p> <p>It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices.  Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.</p> <p>This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.</p> <ol> <li> <p>If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded.  In such case, this License incorporates the limitation as if written in the body of this License.</p> </li> <li> <p>The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time.  Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> </li> </ol> <p>Each version is given a distinguishing version number.  If the Program specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation.  If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation.</p> <ol> <li> <p>If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission.  For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this.  Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.</p> <pre><code>                    NO WARRANTY\n</code></pre> </li> <li> <p>BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p> </li> <li> <p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p> <pre><code>             END OF TERMS AND CONDITIONS\n\n    How to Apply These Terms to Your New Programs\n</code></pre> </li> </ol> <p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program.  It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along\nwith this program; if not, write to the Free Software Foundation, Inc.,\n51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If the program is interactive, make it output a short notice like this when it starts in an interactive mode:</p> <pre><code>Gnomovision version 69, Copyright (C) year name of author\nGnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n</code></pre> <p>The hypothetical commands <code>show w' and</code>show c' should show the appropriate parts of the General Public License.  Of course, the commands you use may be called something other than <code>show w' and</code>show c'; they could even be mouse-clicks or menu items--whatever suits your program.</p> <p>You should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the program, if necessary.  Here is a sample; alter the names:</p> <p>Yoyodyne, Inc., hereby disclaims all copyright interest in the program   `Gnomovision' (which makes passes at compilers) written by James Hacker.</p> <p>, 1 April 1989   Ty Coon, President of Vice <p>This General Public License does not permit incorporating your program into proprietary programs.  If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library.  If this is what you want to do, use the GNU Lesser General Public License instead of this License.</p>"},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"tags/#tag:authentication","title":"Authentication","text":"<ul> <li>            Cognito authentication          </li> </ul>"},{"location":"tags/#tag:cognito","title":"Cognito","text":"<ul> <li>            Cognito authentication          </li> </ul>"},{"location":"tags/#tag:onboarding","title":"Onboarding","text":"<ul> <li>            Development Environment          </li> <li>            Documentation          </li> <li>            Updating Code          </li> <li>            Updating the ERD          </li> </ul>"},{"location":"tags/#tag:database","title":"database","text":"<ul> <li>            Generate database table description          </li> </ul>"},{"location":"tags/#tag:git","title":"git","text":"<ul> <li>            Combine a series of GitHub commits into one commit          </li> </ul>"},{"location":"tags/#tag:postgres","title":"postgres","text":"<ul> <li>            Generate database table description          </li> </ul>"},{"location":"architecture/Notes/","title":"Troubleshooting","text":""},{"location":"architecture/Notes/#modheader","title":"ModHeader","text":"<ul> <li> <p>ModHeader will break Google drive if Authentication Bearer token is set. The Google drive website pops up a dialog saying:</p> <pre><code>\"You are not signed in.\nYou are signed out. Sign back in, then click 'Retry'.\nRetry\"\n</code></pre> <p>The solution is to disable the Authentication header and Google drive will work as normal.</p> </li> </ul>"},{"location":"architecture/authentication/","title":"Cognito authentication","text":"","tags":["Cognito","Authentication"]},{"location":"architecture/authentication/#what-is-it","title":"What is it","text":"<p>Cognito is a single sign-on system from AWS. It allows multiple apps to accept authentication from the same set of user accounts. It separates the management of users and permissions from the applications that use them.</p>","tags":["Cognito","Authentication"]},{"location":"architecture/authentication/#why-we-use-cognito","title":"Why we use cognito","text":"<p>We're invested in AWS, so we might as well use this too.</p>","tags":["Cognito","Authentication"]},{"location":"architecture/authentication/#how-we-implement-it","title":"How we implement it","text":"<p>We're following the implementation from the djangostar tutorial.</p> <p>These are the steps involved:</p> <ol> <li>Backend downloads JWKS from Cognito User Pool on launch</li> <li>User submits credentials and gets id_token and access_token</li> <li>User sends request with token</li> <li>Backend verifies token and processes request</li> <li>User gets response from authenticated API</li> </ol>","tags":["Cognito","Authentication"]},{"location":"architecture/authentication/#current-dev-setup","title":"Current Dev Setup","text":"<ol> <li>Created app client called \"backend within the vrms-dev user pool, with ALLOW_ADMIN_USER_PASSWORD_AUTH enabled</li> <li>\"Domain Name\" is already created at https://hackforla-vrms-dev.auth.us-west-2.amazoncognito.com</li> <li>In \"App client settings\", enabled Implicit grant and openid, Callback URL http://localhost:8000/admin</li> </ol>","tags":["Cognito","Authentication"]},{"location":"architecture/authentication/#how-it-works-now-with-the-dev-user-pool-and-local-development-backend","title":"How it works now with the dev user pool and local development backend","text":"<ol> <li>Create a cognito user and login from the Hosted UI (from App client settings). Successful login will redirect to localhost:8000/admin with the necessary tokens</li> <li>Take the access_token from the URL and make a GET request to http://localhost:8000/api/v1/me (Headers key=Authorization, value=Bearer ) <li>Backend should return the user's profile data</li>","tags":["Cognito","Authentication"]},{"location":"architecture/authentication/#notes","title":"Notes","text":"<p>The tutorial is 2 years old now (from 2020) and there's been some change made since then.</p> <ol> <li>We created an app client in Cognito for the backend to interface with. ALLOW_ADMIN_USER_PASSWORD_AUTH is the new name for the old ADMIN_NO_SRP_AUTH setting. Reference</li> <li>In the custom User model step, the ugettext-lazy package is gettext-lazy for Django 4.0 Reference</li> <li>The tutorial steps don't include instructions to test each step, so it's a little bit of following blindly with the help of linters until the last step.</li> </ol>","tags":["Cognito","Authentication"]},{"location":"architecture/github_actions/","title":"Github actions","text":"<p>These are the github actions used in the project.</p>"},{"location":"architecture/github_actions/#files","title":"Files","text":"<pre><code>.github/workflows/\n\u251c\u2500\u2500 deploy-docs.yml # (1)!\n\u2514\u2500\u2500 pull-request.yml # (2)!\n</code></pre> <ol> <li>Deploy Documentation<ul> <li>triggered by commits to <code>main</code></li> <li>builds and deploys the mkdocs documentation to github pages.</li> </ul> </li> <li>PR Checks<ul> <li>triggered by pull requests</li> <li>validates the mkdocs build configuration</li> </ul> </li> </ol>"},{"location":"architecture/github_actions/#actions-page-workflows","title":"Actions page workflows","text":"<ol> <li>deploy-docs<ul> <li>see deploy-docs.yml above</li> </ul> </li> <li>pages-build-deployment<ul> <li>The github-pages bot runs this automatically for any project that publishes to github pages.</li> <li>It does extra work that we don't need, but there's no way to disable it. See here.</li> </ul> </li> </ol>"},{"location":"architecture/project_structure/","title":"Project Structure","text":"<p>These are the directories and files in the project. Parts are summarized for clarity.</p>"},{"location":"architecture/project_structure/#top-level","title":"Top level","text":"<pre><code>/\n\u251c\u2500\u2500 app/     # (1)!\n\u251c\u2500\u2500 docs/    # (2)!\n\u251c\u2500\u2500 scripts/ # (3)!\n\u251c\u2500\u2500 docker-compose.yml # (4)!\n\u2514\u2500\u2500 pyproject.toml # (5)!\n</code></pre> <ol> <li>The django project. This is also what goes into the Docker image when it's generated by <code>./scripts/buildrun.sh</code>. See Django Project below for details.</li> <li>Documentation for the project code. See Documentation below for details.</li> <li>Scripts used in the project. These are run in the commandline to do various project tasks. See Convenience Scripts for details.</li> <li>The docker compose file.</li> <li>The pyproject.toml file. This holds settings for project tools right now. We may combine this with <code>app/setup.cfg</code> in the future. We may move this file into <code>app/</code> if it makes sense.</li> </ol>"},{"location":"architecture/project_structure/#django-project","title":"Django project","text":"<pre><code>app/\n\u251c\u2500\u2500 core/ # (1)!\n\u251c\u2500\u2500 data/ # (2)!\n\u251c\u2500\u2500 peopledepot/ # (3)!\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 asgi.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 settings.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 urls.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 wsgi.py\n\u251c\u2500\u2500 scripts/ # (4)!\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 convert.py\n\u251c\u2500\u2500 Dockerfile # (5)!\n\u251c\u2500\u2500 entrypoint.sh # (6)!\n\u251c\u2500\u2500 manage.py # (7)!\n\u251c\u2500\u2500 requirements.in # (8)!\n\u251c\u2500\u2500 requirements.txt # (9)!\n\u2514\u2500\u2500 setup.cfg # (10)!\n</code></pre> <ol> <li>The core app in django. This app contains the API and models. See Core App below for details.</li> <li>The data app in django. This app contains the initial data migrations. See Data App below for details.</li> <li>The django project configuration.</li> <li>Scripts used in the project. This currently contains the <code>convert.py</code> script, which converts csv files into django initial data code. It's used to generate code for the initial data migrations.</li> <li>Dockerfile used to build the Docker image.</li> <li>Entrypoint script called by the Docker image.</li> <li>Django manage.py script. In nearly all cases, there's no good reason to change this. Just leave it alone.</li> <li>Requirements.in file used by <code>uv pip compile</code>. See the uv tool for details.</li> <li>Requirements.txt file generated by <code>uv pip install</code>. Do not modify this file. Edit the <code>requirements.in</code> file instead. See the uv tool for details.</li> <li>Config file for development support tools such as <code>flake8</code> and <code>pytest</code>. <code>flake8</code> is the only tool that doesn't support <code>pyproject.toml</code> yet, which is why we have this file.</li> </ol>"},{"location":"architecture/project_structure/#core-app","title":"Core App","text":"<pre><code>core/\n\u251c\u2500\u2500 admin.py # (1)!\n\u251c\u2500\u2500 api/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 permissions.py # (2)!\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 serializers.py # (3)!\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 urls.py # (4)!\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 views.py # (5)!\n\u251c\u2500\u2500 apps.py # (6)!\n\u251c\u2500\u2500 initial_data/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 Initial data in json or csv format # (7)!\n\u251c\u2500\u2500 migrations/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 nnnn_migration_name.py # (8)!\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 max_migration.txt # (9)!\n\u251c\u2500\u2500 models.py # (10)!\n\u251c\u2500\u2500 scripts/ # (11)!\n\u251c\u2500\u2500 tests/\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 conftest.py # (12)!\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 test_api.py # (13)!\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 test_models.py # (14)!\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test_permissions.py # (15)!\n\u2514\u2500\u2500 utils/ # (16)!\n.   \u2514\u2500\u2500 jwt.py # (17)!\n</code></pre> <ol> <li>Admin site configuration.</li> <li>Permission classes definitions.</li> <li>Serializers to control what data is sent to the client.</li> <li>Routes for the API.</li> <li>Views to retrieve data for the API.</li> <li>AppConfig for the core app.</li> <li>Initial data scripts. See Create initial data scripts for how to create these.</li> <li>Migration scripts. These are generated by the <code>makemigrations</code> command.</li> <li>File used by <code>django-linear-migrations</code>. It stores the last migration name for the app for use in git merge conflicts.</li> <li>Models for the core app.</li> <li>Scripts for the core app. We use it to hold temporary scripts in Create initial data migrations, but there's no need to commit them into git.</li> <li>Test fixtures file</li> <li>Test for the API</li> <li>Test for the models</li> <li>Test for the permissions</li> <li>Utility scripts for the core app</li> <li>Utility functions supporting JWT with Cognito</li> </ol>"},{"location":"architecture/project_structure/#data-app","title":"Data App","text":"<pre><code>data/\n\u2514\u2500\u2500 migrations/\n.\u00a0\u00a0 \u251c\u2500\u2500 nnnn_migration_name.py # (1)!\n.\u00a0\u00a0 \u251c\u2500\u2500 ...\n.   \u2514\u2500\u2500 max_migration.txt # (2)!\n</code></pre> <ol> <li>Migration scripts. See Create initial data migrations for how to create these.</li> <li>File used by <code>django-linear-migrations</code>. It stores the last migration name for the app for use in git merge conflicts.</li> </ol>"},{"location":"architecture/project_structure/#documentation","title":"Documentation","text":"<pre><code>/\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 [topics]/ # (1)!\n\u2502   \u251c\u2500\u2500 CONTRIBUTING.md # (2)!\n\u2502   \u251c\u2500\u2500 index.md # (3)!\n\u2502   \u251c\u2500\u2500 LICENSE # (4)!\n\u2502   \u251c\u2500\u2500 license.md # (5)!\n\u2502   \u2514\u2500\u2500 _static/\n\u251c\u2500\u2500 CONTRIBUTING.md # (6)!\n\u251c\u2500\u2500 LICENSE # (7)!\n\u251c\u2500\u2500 mkdocs.yml # (8)!\n\u2514\u2500\u2500 README.md # (9)!\n</code></pre> <ol> <li>Directories containing markdown files on different topics.</li> <li>Placeholder for the <code>CONTRIBUTING.md</code> file in the project root. MkDocs requires all documentation files to be in the <code>docs/</code> directory. This file uses a snippet to import the source content.</li> <li>Home page of the documentation site. This files uses a snippet to import the <code>README.md</code> file from the project root.</li> <li>Placeholder <code>LICENSE</code> file. This file uses a snippet to import the <code>LICENSE</code> file from the project root. This is used for linking from the Documentation Homepage as well as the <code>README.md</code> file in the Github web interface, which knows the file by this name only.</li> <li>Placeholder <code>license.md</code> file. This file uses a snippet to import the <code>LICENSE</code> file from the project root. This is used for the MkDocs nav section, which requires the <code>md</code> file extension.</li> <li>Contributing file for the project. This name is capitalized according to Github conventions.</li> <li>Licence file for the project. This name is capitalized according to Github conventions.</li> <li>MkDocs config file.</li> <li>README file for the project. This name is capitalized according to Github conventions.</li> </ol>"},{"location":"architecture/tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"architecture/tags/#tag:authentication","title":"Authentication","text":"<ul> <li>            Cognito authentication          </li> </ul>"},{"location":"architecture/tags/#tag:cognito","title":"Cognito","text":"<ul> <li>            Cognito authentication          </li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Thank you for volunteering your time! The following is a set of guidelines for contributing to the PeopleDepot repository, which is hosted on GitHub.</p> <p>Please make sure you have completed the onboarding process which includes joining the Hack for LA Slack, GitHub, and Google Drive. If you have not been onboarded, see the Getting Started Page. Workshop attendees are granted a temporary exception from this requirement.</p> <ul> <li> <p>Joining the team</p> </li> <li> <p>Setting up the Development Environment</p> <ul> <li>Pre-requisites</li> <li>Fork the repository</li> <li>Build and run locally</li> </ul> </li> <li> <p>Updating code</p> </li> <li> <p>Documentation</p> </li> <li> <p>How-to Guides</p> </li> <li> <p>Tools</p> </li> </ul>"},{"location":"contributing/tags/","title":"Tags","text":"<p>Following is a list of relevant tags:</p>"},{"location":"contributing/tags/#tag:onboarding","title":"Onboarding","text":"<ul> <li>            Development Environment          </li> <li>            Documentation          </li> <li>            Updating Code          </li> <li>            Updating the ERD          </li> </ul>"},{"location":"contributing/tags/#tag:database","title":"database","text":"<ul> <li>            Generate database table description          </li> </ul>"},{"location":"contributing/tags/#tag:git","title":"git","text":"<ul> <li>            Combine a series of GitHub commits into one commit          </li> </ul>"},{"location":"contributing/tags/#tag:postgres","title":"postgres","text":"<ul> <li>            Generate database table description          </li> </ul>"},{"location":"contributing/howto/","title":"How-to Guides","text":"<p>These are the developer guides for how to do specific things with the project.</p> <ol> <li>Add model and API endpoints</li> <li>Create initial data migrations</li> <li>Run the project in a virtual environment</li> </ol>"},{"location":"contributing/howto/add-model-and-api-endpoints/","title":"Add new model and API endpoints","text":"<p>This guide aims to enable developers with little or no django experience to add django models and API endpoints to the project. Most code examples are followed by detailed explanations.</p> The developer will have exposure to the following in this document <ul> <li>python</li> <li>django</li> <li>django rest framework</li> <li>relational database through the Django ORM (object-relational mapper)</li> <li>data types</li> <li>object-oriented concepts (object, inheritance, composition)</li> <li>unit testing</li> <li>API design</li> <li>command line</li> </ul> <p>This guide assumes the developer has followed the updating code guide and have forked and created a local branch to work on this. The development server would be already running in the background and will automatically apply the changes when we save the files.</p> <p>We will choose the recurring_event issue as an example. Our goal is to create a database table and an API that a client can use to work with the data. The work is split into 3 testable components: the model, the admin site, and the API</p> <p>Let's start!</p>"},{"location":"contributing/howto/add-model-and-api-endpoints/#data-model","title":"Data model","text":"TDD test <ol> <li> <p>Write the test</p> <p>We would like the model to store these data, and to return the name property in the str function.</p> <p>In <code>app/core/tests/test_models.py</code></p> app/core/tests/test_models.py<pre><code>def test_recurring_event_model(project):\n    from datetime import datetime\n\n    payload = {\n        \"name\": \"test event\",\n        \"start_time\": datetime(2023, 1, 1, 2, 34),\n        \"duration_in_min\": 60,\n        \"video_conference_url\": \"https://zoom.com/mtg/1234\",\n        \"additional_info\": \"long description\",\n        \"project\": project,\n    }\n    recurring_event = RecurringEvent(**payload)\n    # recurring_event.save()\n    assert recurring_event.name == payload[\"name\"]\n    assert recurring_event.start_time == payload[\"start_time\"]\n    assert recurring_event.duration_in_min == payload[\"duration_in_min\"]\n    assert recurring_event.video_conference_url == payload[\"video_conference_url\"]\n    assert recurring_event.additional_info == payload[\"additional_info\"]\n    assert recurring_event.project == payload[\"project\"]\n    assert str(recurring_event) == payload[\"name\"]\n</code></pre> <p>For testing many-to-many relationships, we can add</p> app/core/tests/test_models.py<pre><code>def test_project_recurring_event_relationship(project):\n    recurring_event = RecurringEvent.objects.get(name=\"{Name of Recurring Event}\")\n\n    project.recurring_events.add(recurring_event)\n    assert project.recurring_events.count() == 1\n    assert project.recurring_events.contains(recurring_event)\n    assert recurring_event.projects.contains(project)\n\n    project.sdgs.remove(recurring_event)\n    assert project.recurring_events.count() == 0\n    assert not project.recurring_events.contains(recurring_event)\n    assert not recurring_event.projects.contains(project)\n</code></pre> </li> <li> <p>See it fail</p> <pre><code>./scripts/test.sh\n</code></pre> </li> <li> <p>Run it again after implementing the model to make sure the code satisfies the test</p> </li> </ol>"},{"location":"contributing/howto/add-model-and-api-endpoints/#add-the-model","title":"Add the model","text":"<p>Add the following to <code>app/core/models.py</code></p> app/core/models.py<pre><code>class RecurringEvent(AbstractBaseModel):  # (1)!\n    \"\"\"\n    Recurring Events\n    \"\"\"\n\n    name = models.CharField(max_length=255)\n    start_time = models.TimeField(\"Start\", null=True, blank=True)  # (2)!\n    duration_in_min = models.IntegerField(null=True, blank=True)  # (3)!\n    video_conference_url = models.URLField(blank=True)\n    additional_info = models.TextField(blank=True)  # (4)!\n\n    project = models.ForeignKey(Project, on_delete=models.CASCADE)\n    # (5)!\n    # location_id = models.ForeignKey(\"Location\", on_delete=models.DO_NOTHING)\n    # event_type_id = models.ForeignKey(\"EventType\", on_delete=models.DO_NOTHING)\n    # brigade_id = models.ForeignKey(\"Brigade\", on_delete=models.DO_NOTHING)\n    # day_of_week = models.ForeignKey(\"DayOfWeek\", on_delete=models.DO_NOTHING)\n    # must_roles = models.ManyToManyField(\"Role\")\n    # should_roles = models.ManyToManyField(\"Role\")\n    # could_roles = models.ManyToManyField(\"Role\")\n    # frequency_id = models.ForeignKey(\"Frequency\", on_delete=models.DO_NOTHING)\n\n    def __str__(self):  # (6)!\n        return f\"{self.name}\"\n</code></pre> <ol> <li>We inherit all models from AbstractBaseModel, which provides a <code>uuid</code> primary key, <code>created_at</code>, and <code>updated_at</code> timestamps. In the Github issue, these fields might be called <code>id</code>, <code>created</code>, and <code>updated</code>. There's no need to add those.</li> <li>Most fields should not be required. Text fields should be <code>blank=True</code>, data fields should be <code>null=True</code>.</li> <li>The data types in the github issue may be given in database column types such as <code>INTEGER</code>, <code>VARCHAR</code>, but we need to convert them into Django field types when defining the model.</li> <li><code>VARCHAR</code> can be either <code>CharField</code> or <code>TextField</code>.<ol> <li><code>CharField</code> has a <code>max_length</code>, which makes it useful for finite length text data. We're going default to giving them <code>max_length=255</code> unless there's a better value like <code>max_length=2</code> for state abbreviation.</li> <li><code>TextField</code> doesn't have a maximum length, which makes it ideal for large text fields such as <code>description</code>.</li> </ol> </li> <li>Try to add the relationships to non-existent models, but comment them out. Another developer will complete them when they go to implement those models.</li> <li>Always override the <code>__str__</code> function to output something more meaningful than the default. It lets us do a quick test of the model by calling <code>str([model])</code>. It's also useful for the admin site model list view.</li> </ol> Updating models.py for many-to-many relationships <p>For adding many-to-many relationships with additional fields, such as <code>ended_on</code>, we can add</p> app/core/models.py<pre><code>class Project(AbstractBaseModel):\n    ...\n    recurring_events = models.ManyToManyField(\n        \"RecurringEvent\",\n        related_name=\"projects\",\n        blank=True,\n        through=\"ProjectRecurringEventXref\",\n    )\n    ...\n\n\nclass ProjectRecurringEventXref(AbstractBaseModel):\n    \"\"\"\n    Joins a recurring event to a project\n    \"\"\"\n\n    recurring_event_id = models.ForeignKey(RecurringEvent, on_delete=models.CASCADE)\n    project_id = models.ForeignKey(Project, on_delete=models.CASCADE)\n    ended_on = models.DateField(\"Ended on\", null=True, blank=True)\n</code></pre> <p>For adding many-to-many relationships without additional fields, we can just add</p> app/core/models.py<pre><code>class Project(AbstractBaseModel):\n    ...\n    recurring_events = models.ManyToManyField(\n        \"RecurringEvent\",\n        related_name=\"projects\",\n        blank=True,\n    )\n    ...\n</code></pre> <p>which leaves out the \"through\" field and the \"join table\" will be created implicitly.</p>"},{"location":"contributing/howto/add-model-and-api-endpoints/#run-migrations","title":"Run migrations","text":"<p>This generates the database migration files</p> <pre><code>./scripts/migrate.sh\n</code></pre> Test <p>Since we overrode the <code>__str__</code> function, we need to write a test for it.</p> <ol> <li> <p>Add a fixture for the model</p> <p>Fixtures are reusable code that can be used in multiple tests by declaring them as parameters of the test case. In this example, we show both defining a fixture (recurring_event) and using another fixture (project).</p> <p>Note: The conftest file is meant to hold shared test fixtures, among other things. The fixtures have directory scope.</p> <p>Add the following to <code>app/core/tests/conftest.py</code></p> app/core/tests/conftest.py<pre><code>@pytest.fixture\n# (1)!\ndef recurring_event(project):  # (2)!\n    # (3)!\n    return RecurringEvent.objects.create(name=\"Test Recurring Event\", project=project)\n</code></pre> <ol> <li>We name the fixture after the model name (<code>recurring_event</code>).</li> <li>This model makes use of the <code>project</code> model as a foreign key relation, so we pass in the <code>project</code> fixture, which creates a <code>project</code> model.</li> <li>We create an object of the new model, passing in at least the required fields. In this case, we passed in enough arguments to use the <code>__str__</code> method in a test.</li> </ol> </li> <li> <p>Add a test case</p> <p>When creating Django models, there's no need to test the CRUD functionality since Django itself is well-tested and we can expect it to generate the correct CRUD functionality. Feel free to write some tests for practice. What really needs testing are any custom code that's not part of Django. Sometimes we need to override the default Django behavior and that should be tested.</p> <p>Here's a basic test to see that the model stores its name.</p> <p>Add the following to <code>app/core/tests/test_models.py</code></p> app/core/tests/test_models.py<pre><code>def test_recurring_event(recurring_event):  # (1)!\n    # (2)!\n    assert str(recurring_event) == \"Test Recurring Event\"  # (3)!\n</code></pre> <ol> <li>Pass in our fixture so that the model object is created for us.</li> <li>The <code>__str__</code> method should be tested since it's an override of the default Django method.</li> <li>Write assertion(s) to check that what's passed into the model is what it contains. The simplest thing to check is the <code>__str__</code> method.</li> </ol> </li> <li> <p>Run the test script to show it passing</p> <pre><code>./scripts/test.sh\n</code></pre> </li> </ol> Check and commit <p>This is a good place to pause, check, and commit progress.</p> <ol> <li> <p>Run pre-commit checks</p> <pre><code>./scripts/precommit-check.sh\n</code></pre> </li> <li> <p>Add and commit changes</p> <pre><code>git add -A\ngit commit -m \"feat: add model: recurring_event\"\n</code></pre> </li> </ol>"},{"location":"contributing/howto/add-model-and-api-endpoints/#admin-site","title":"Admin site","text":"<p>Django comes with an admin site interface that allows admin users to view and change the data in the models. It's essentially a database viewer.</p>"},{"location":"contributing/howto/add-model-and-api-endpoints/#register-the-model","title":"Register the model","text":"<p>In <code>app/core/admin.py</code></p> <ol> <li> <p>Import the new model</p> app/core/admin.py<pre><code>from .models import RecurringEvent\n</code></pre> </li> <li> <p>Register the model with the admin site</p> app/core/admin.py<pre><code>@admin.register(RecurringEvent)  # (2)!\nclass RecurringEventAdmin(admin.ModelAdmin):  # (1)!\n    list_display = (  # (3)!\n        \"name\",\n        \"start_time\",\n        \"duration_in_min\",\n    )  # (4)!\n</code></pre> <ol> <li>We declare a ModelAdmin class so we can customize the fields that we expose to the admin interface.</li> <li>We use the register decorator to register the class with the admin site.</li> <li>list_display controls what's shown in the list view</li> <li>list_filter adds filter controls to declared fields (useful, but not shown in this example).</li> </ol> </li> </ol>"},{"location":"contributing/howto/add-model-and-api-endpoints/#view-the-admin-site","title":"View the admin site","text":"<p>Check that everything's working and there are no issues, which should be the case unless there's custom input fields creating problems.</p> <ol> <li> <p>See the development setup guide section on \"Build and run using Docker locally\" for how to view the admin interface.</p> </li> <li> <p>Example of a custom field (as opposed to the built-in ones)</p> <pre><code># (1)!\ntime_zone = TimeZoneField(blank=True, use_pytz=False, default=\"America/Los_Angeles\")\n</code></pre> <ol> <li>Having a misconfigured or buggy custom field could cause the admin site to crash and the developer will need to look at the debug message and resolve it.</li> </ol> </li> </ol> Test <ol> <li>Feel free to write tests for the admin. There's no example for it yet.</li> <li>The reason there's no tests is that the admin site is independent of the API functionality, and we're mainly interested in the API part.</li> <li>When the time comes that we depend on the admin interface, we will need to have tests for the needed functionalities.</li> </ol> Check and commit <p>This is a good place to pause, check, and commit progress.</p> <ol> <li> <p>Run pre-commit checks</p> <pre><code>./scripts/precommit-check.sh\n</code></pre> </li> <li> <p>Add and commit changes</p> <pre><code>git add -A\ngit commit -m \"feat: register admin: recurring_event\"\n</code></pre> </li> </ol>"},{"location":"contributing/howto/add-model-and-api-endpoints/#api","title":"API","text":"<p>There's several components to adding API endpoints: Model(already done), Serializer, View, and Route.</p>"},{"location":"contributing/howto/add-model-and-api-endpoints/#add-serializer","title":"Add serializer","text":"<p>This is code that serializes objects into strings for the API endpoints, and deserializes strings into object when we receive data from the client.</p> <p>In <code>app/core/api/serializers.py</code></p> Updating serializers.py for many-to-many relationships <p>Following the many-to-many relationship between project and recurring event from above,</p> <p>Update the existing serializer classes</p> app/core/api/serializers.py<pre><code>class ProjectSerializer(serializers.ModelSerializer):\n    \"\"\"Used to retrieve project info\"\"\"\n\n    recurring_events = serializers.StringRelatedField(many=True)\n\n    class Meta:\n        model = Project\n        fields = (\n            \"uuid\",\n            \"name\",\n            \"description\",\n            \"created_at\",\n            \"updated_at\",\n            \"completed_at\",\n            \"github_org_id\",\n            \"github_primary_repo_id\",\n            \"hide\",\n            \"google_drive_id\",\n            \"image_logo\",\n            \"image_hero\",\n            \"image_icon\",\n            \"recurring_events\",\n        )\n        read_only_fields = (\n            \"uuid\",\n            \"created_at\",\n            \"updated_at\",\n            \"completed_at\",\n        )\n\n\nclass RecurringEventSerializer(serializers.ModelSerializer):\n    \"\"\"Used to retrieve recurring_event info\"\"\"\n\n    projects = serializers.StringRelatedField(many=True)\n\n    class Meta:\n        model = RecurringEvent\n        fields = (\n            \"uuid\",\n            \"name\",\n            \"start_time\",\n            \"duration_in_min\",\n            \"video_conference_url\",\n            \"additional_info\",\n            \"project\",\n            \"projects\",\n        )\n        read_only_fields = (\n            \"uuid\",\n            \"created_at\",\n            \"updated_at\",\n        )\n</code></pre> <ol> <li> <p>Import the new model</p> app/core/api/serializers.py<pre><code>from core.models import RecurringEvent\n</code></pre> </li> <li> <p>Add a serializer class</p> app/core/api/serializers.py<pre><code>class RecurringEventSerializer(serializers.ModelSerializer):  # (1)!\n    \"\"\"Used to retrieve recurring_event info\"\"\"\n\n    class Meta:\n        model = RecurringEvent  # (2)!\n        fields = (\n            \"uuid\",\n            \"name\",\n            \"start_time\",\n            \"duration_in_min\",\n            \"video_conference_url\",\n            \"additional_info\",\n            \"project\",\n        )\n        read_only_fields = (\n            \"uuid\",  # (3)!\n            \"created_at\",\n            \"updated_at\",\n        )\n</code></pre> <ol> <li>We inherit from ModelSerializer. It knows how to serialize/deserialize the Django built-in data fields so we don't have to write the code to do it.</li> <li>We do need to pass in the <code>model</code>, the <code>fields</code> we want to expose through the API, and any <code>read_only_fields</code>.</li> <li><code>uuid</code>, <code>created_at</code>, and <code>updated_at</code> are managed by automations and are always read-only.</li> </ol> </li> <li> <p>Custom data fields may need extra code in the serializer</p> <pre><code>time_zone = TimeZoneSerializerField(use_pytz=False)  # (1)!\n</code></pre> <ol> <li>This non-built-in model field provides a serializer so we just point to it.</li> </ol> </li> <li> <p>Custom validators if we need them</p> <p>We will need to write custom validators here if we want custom behavior, such as validating URL strings and limit them to the github user profile pattern using regular expression, for example.</p> <pre><code>Example here when we have one\n</code></pre> </li> </ol>"},{"location":"contributing/howto/add-model-and-api-endpoints/#add-viewset","title":"Add viewset","text":"<p>Viewset defines the set of API endpoints for the model.</p> <p>In <code>app/core/api/views.py</code></p> <ol> <li> <p>Import the model</p> app/core/api/views.py<pre><code>from ..models import RecurringEvent\n</code></pre> </li> <li> <p>Import the serializer</p> app/core/api/views.py<pre><code>from .serializers import RecurringEventSerializer\n</code></pre> </li> <li> <p>Add the viewset and CRUD API endpoint descriptions</p> app/core/api/views.py<pre><code>@extend_schema_view(  # (2)!\n    list=extend_schema(description=\"Return a list of all the recurring events\"),\n    create=extend_schema(description=\"Create a new recurring event\"),\n    retrieve=extend_schema(description=\"Return the details of a recurring event\"),\n    destroy=extend_schema(description=\"Delete a recurring event\"),\n    update=extend_schema(description=\"Update a recurring event\"),\n    partial_update=extend_schema(description=\"Patch a recurring event\"),\n)\nclass RecurringEventViewSet(viewsets.ModelViewSet):  # (1)!\n    permission_classes = [IsAuthenticated]  # (4)!\n    queryset = RecurringEvent.objects.all()  # (3)!\n    serializer_class = RecurringEventSerializer\n</code></pre> <ol> <li>We inherit from ModelViewSet, which provides a default view implementation of all 6 CRUD actions: <code>create</code>, <code>retrieve</code>, <code>partial_update</code>, <code>update</code>, <code>destroy</code>, <code>list</code>.</li> <li>We use the <code>extend_schema_view</code> decorator to attach the API doc strings to the viewset. They are usually defined as docstrings of the corresponding function definitions inside the viewset. Since we use <code>ModelViewSet</code>, there's nowhere to put the docstrings but above the viewset.</li> <li>The minimum code we need with <code>ModelViewSet</code> are the <code>queryset</code>, and the <code>serializer_class</code>.</li> <li>Permissions<ol> <li>For now use <code>permission_classes = [IsAuthenticated]</code></li> <li>It doesn't control permissions the way we want, but we will fix it later.</li> </ol> </li> </ol> </li> </ol> Extended example: Query Params <p>This example shows how to add a filter params. It's done for the user model as a requirement from VRMS.</p> <ol> <li> <p>Here's a more complex API doc example (this example is using the User model's ViewSet)</p> app/core/api/views.py<pre><code>@extend_schema_view(\n    list=extend_schema(  # (2)!\n        summary=\"Users List\",\n        description=\"Return a list of all the existing users\",\n        parameters=[\n            OpenApiParameter(\n                name=\"email\",\n                type=str,\n                description=\"Filter by email address\",\n                examples=[\n                    OpenApiExample(\n                        \"Example 1\",\n                        summary=\"Demo email\",\n                        description=\"get the demo user\",\n                        value=\"demo-email@email.com,\",\n                    ),\n                ],\n            ),\n            OpenApiParameter(\n                name=\"username\",\n                type=OpenApiTypes.STR,\n                location=OpenApiParameter.QUERY,\n                description=\"Filter by username\",\n                examples=[\n                    OpenApiExample(\n                        \"Example 1\",\n                        summary=\"Demo username\",\n                        description=\"get the demo user\",\n                        value=\"demo-user\",\n                    ),\n                ],\n            ),\n        ],\n    ),\n    create=extend_schema(description=\"Create a new user\"),  # (1)!\n    retrieve=extend_schema(description=\"Return the given user\"),\n    destroy=extend_schema(description=\"Delete the given user\"),\n    update=extend_schema(description=\"Update the given user\"),\n    partial_update=extend_schema(description=\"Partially update the given user\"),\n)\nclass UserViewSet(viewsets.ModelViewSet):\n    pass\n</code></pre> <ol> <li>Define strings for all 6 actions: <code>create</code>, <code>retrieve</code>, <code>partial_update</code>, <code>update</code>, <code>destroy</code>, <code>list</code>.</li> <li>This one is fancy and provides examples of data to pass into the query params. It's probably more than we need right now.<ol> <li>The examples array can hold multiple examples.<ol> <li>Example ID string has to be unique but is not displayed.</li> <li><code>summary</code> string appears as an option in the dropdown.</li> <li><code>description</code> is displayed in the example.</li> </ol> </li> </ol> </li> </ol> </li> <li> <p>Add any query params according to the requirements (this example is using the User model's ViewSet)</p> app/core/api/views.py<pre><code>class UserViewSet(viewsets.ModelViewSet):\n    ...\n\n    def get_queryset(self):  # (1)!\n        \"\"\"\n        Optionally filter users by an 'email' and/or 'username' query paramerter in the URL\n        \"\"\"\n        queryset = get_user_model().objects.all()  # (2)!\n        email = self.request.query_params.get(\"email\")\n        if email is not None:\n            queryset = queryset.filter(email=email)\n        username = self.request.query_params.get(\"username\")\n        if username is not None:\n            queryset = queryset.filter(username=username)\n        return queryset\n</code></pre> <ol> <li> <p>Notice the <code>queryset</code> property is now the <code>get_queryset(()</code> function which returns the queryset.</p> <p>The <code>get_queryset()</code> function overrides the default and lets us filter the objects returned to the client if they pass in a query param.</p> </li> <li> <p>Start with all the model objects and filter them based on any available query params.</p> </li> </ol> </li> </ol>"},{"location":"contributing/howto/add-model-and-api-endpoints/#register-api-endpoints","title":"Register API endpoints","text":"<p>In <code>app/core/api/urls.py</code></p> <ol> <li> <p>Import the viewset.</p> app/core/api/urls.py<pre><code>from .views import RecurringEventViewSet\n</code></pre> </li> <li> <p>Register the viewset to the router</p> app/core/api/urls.py<pre><code>router.register(r\"recurring-events\", RecurringEventViewSet, basename=\"recurring-event\")\n# (1)!\n</code></pre> <ol> <li>Params<ol> <li>First param is the URL prefix use in the API routes. It is, by convention, plural<ul> <li>This would show up in the URL like this: <code>http://localhost:8000/api/v1/recuring-events/</code> and <code>http://localhost:8000/api/v1/recuring-events/&lt;uuid&gt;</code></li> </ul> </li> <li>Second param is the viewset class which defines the API actions</li> <li><code>basename</code> is the name used for generating the endpoint names, such as -list, -detail, etc. It's in the singular form. This is automatically generated if the viewset definition contains a <code>queryset</code> attribute, but it's required if the viewset overrides that with the <code>get_queryset</code> function<ul> <li><code>reverse(\"recurring-event-list\")</code> would return <code>http://localhost:8000/api/v1/recuring-events/</code></li> </ul> Test <p>For the CRUD operations, since we're using <code>ModelViewSet</code> where all the actions are provided by <code>rest_framework</code> and well-tested, it's not necessary to have test cases for them. But here's an example of one.</p> <p>In <code>app/core/tests/test_api.py</code></p> <ol> <li> <p>Import API URL</p> app/core/tests/test_api.py<pre><code>RECURRING_EVENTS_URL = reverse(\"recurring-event-list\")\n</code></pre> </li> <li> <p>Add test case</p> app/core/tests/test_api.py<pre><code>def test_create_recurring_event(auth_client, project):\n    \"\"\"Test that we can create a recurring event\"\"\"\n\n    payload = {\n        \"name\": \"Test Weekly team meeting\",\n        \"start_time\": \"18:00:00\",\n        \"duration_in_min\": 60,\n        \"video_conference_url\": \"https://zoom.com/link\",\n        \"additional_info\": \"Test description\",\n        \"project\": project.uuid,\n    }\n    res = auth_client.post(RECURRING_EVENTS_URL, payload)\n    assert res.status_code == status.HTTP_201_CREATED\n    assert res.data[\"name\"] == payload[\"name\"]\n</code></pre> <ol> <li>Given<ol> <li>Pass in the necessary fixtures</li> <li>Construct the payload</li> </ol> </li> <li>When<ol> <li>Create the object</li> </ol> </li> <li>Then<ol> <li>Check that it's created via status code</li> <li>Maybe also check the data. A real test should check all the data, but we're kind of relying on django to have already tested this.</li> </ol> </li> </ol> </li> <li> <p>Run the test script to show it passing</p> <pre><code>./scripts/test.sh\n</code></pre> </li> </ol> Test many-to-many relationships <p>In <code>app/core/tests/test_api.py</code></p> <ol> <li> <p>Import API URL</p> app/core/tests/test_api.py<pre><code>PROJECTS_URL = reverse(\"project-list\")\n</code></pre> </li> <li> <p>Add test case (following the example above)</p> app/core/tests/test_api.py<pre><code>def test_project_sdg_xref(auth_client, project, recurring_event):\n    def get_object(objects, target_uuid):\n        for obj in objects:\n            if str(obj[\"uuid\"]) == str(target_uuid):\n                return obj\n        return None\n\n    project.recurring_events.add(recurring_event)\n    proj_res = auth_client.get(PROJECTS_URL)\n    test_proj = get_object(proj_res.data, project.uuid)\n    assert test_proj is not None\n    assert len(test_proj[\"recurring_events\"]) == 1\n    assert recurring_event.name in test_proj[\"recurring_events\"]\n\n    recurring_event_res = auth_client.get(RECURRING_EVENT_URL)\n    test_recurring_event = get_object(recurring_event_res.data, recurring_event.uuid)\n    assert test_recurring_event is not None\n    assert len(test_recurring_event[\"projects\"]) == 1\n    assert project.name in test_recurring_event[\"projects\"]\n</code></pre> </li> <li> <p>Run the test script to show it passing</p> <pre><code>./scripts/test.sh\n</code></pre> </li> </ol> Check and commit <p>This is a good place to pause, check, and commit progress.</p> <ol> <li> <p>Run pre-commit checks</p> <pre><code>./scripts/precommit-check.sh\n</code></pre> </li> <li> <p>Add and commit changes</p> <pre><code>git add -A\ngit commit -m \"feat: add endpoints: recurring_event\"\n</code></pre> </li> </ol>"},{"location":"contributing/howto/combine-a-series-of-GitHub-commits/","title":"Combine a series of GitHub commits into one commit","text":"<p>This is a quick way of combining a series of GitHub commits into one:</p> <ol> <li>Assume we're at the head of the PR branch with 4 commits and want to combine the 4 commits into one.</li> <li>Soft reset to the earliest commit, with all the changes of the later commits staged.     <pre><code>git reset --soft HEAD~3\n</code></pre></li> <li>Amend the staged changed into the earliest commit.     <pre><code>git commit --amend --no-edit\n</code></pre> note: omit the <code>--no-edit</code> flag if you want to edit the commit message.</li> </ol> <p>Although there are other ways of combining GitHub commits (like <code>lazygit</code> and the standard interactive rebase), these are more interactive than the process described above and therefore more difficult to describe in text form.</p>","tags":["git"]},{"location":"contributing/howto/combine-a-series-of-GitHub-commits/#where-would-this-information-have-been-useful","title":"Where would this information have been useful?","text":"<ul> <li>https://github.com/hackforla/peopledepot/pull/398/commits contained 4 commits, which were then merged into one before rebasing it to <code>main</code>, in order to make it easier to work with.</li> <li>This info could be useful when dealing with PRs that need to be rebased to <code>upstream/main</code>, especially when there are also migration conflicts in which more than one commit in the PR contains migration files. If the PR commits are all merged into one, the migration conflicts can be simplified along with the repetitive need to resolve merges.</li> </ul>","tags":["git"]},{"location":"contributing/howto/combine-a-series-of-GitHub-commits/#which-roles-will-benefit-most-from-this-information","title":"Which roles will benefit most from this information?","text":"<ul> <li>Backend</li> <li>Dev</li> </ul>","tags":["git"]},{"location":"contributing/howto/create-initial-data-migrations/","title":"Create initial data scripts","text":""},{"location":"contributing/howto/create-initial-data-migrations/#overview","title":"Overview","text":"<p>The goal is to convert our initial data into scripts that can be loaded into the database when the backend is set up for the first time.</p> <p>These are the steps:</p> <ol> <li>Export the data into a csv file</li> <li>Generate a python script from the csv data</li> </ol>"},{"location":"contributing/howto/create-initial-data-migrations/#prerequisites","title":"Prerequisites","text":"<p>You must have Docker installed</p> <p>The initial data exists in a Google spreadsheet, such as this one for People Depot. There should be individual sheets named after the model names the data correspond to, such as <code>ProgramArea - Data</code>. The sheet name is useful for us to identify the model it corresponds to.</p> <p>The sheet should be formatted like so:</p> <ul> <li>the first row contains the names of the field names in the model. The names must be exactly the same</li> <li>rows 2 to n are the initial data for the model we want to turn into a script.</li> </ul> <p>It is required that there be data in the first column of the sheet.</p>"},{"location":"contributing/howto/create-initial-data-migrations/#gather-data-for-preparation","title":"Gather data for preparation","text":"<ol> <li> <p>Export the data from the Google spreadsheet</p> <ol> <li>Find the sheet in the document containing the data to export. Let's use the <code>ProgramArea - Data</code> data as our example.</li> <li>Go to File -&gt; Download -&gt; Comma Separated Values (.csv). This will download the sheet as a .csv file.</li> <li>Copy the file to the app/core/initial_data directory.</li> </ol> </li> </ol>"},{"location":"contributing/howto/create-initial-data-migrations/#convert-data-into-python-script","title":"Convert data into Python script","text":"<ol> <li> <p>Start Docker</p> </li> <li> <p>From project root, run</p> <pre><code>./scripts/buildrun.sh\n</code></pre> </li> <li> <p>Go to the project root and run this command</p> <pre><code>docker compose exec web python scripts/convert.py \"core/initial_data/PD_ Table and field explanations  - ProgramArea - Data.csv\"\n</code></pre> </li> <li> <p>Check that there's a new file called <code>app/core/scripts/programarea_seed.py</code> and that it looks correct</p> <ol> <li> <p>You can run it to verify, but will need to remove that data if you care about restoring the database state</p> </li> <li> <p>Run this command to run the script</p> </li> </ol> <pre><code>docker compose exec web python manage.py runscript programarea_seed\n</code></pre> <ol> <li>To remove the data, go into the database and delete all rows from <code>core_programarea</code></li> </ol> <pre><code>docker compose exec web python manage.py dbshell\n\n# now we have a shell to the db\n\n# see if all the seed data got inserted\nselect count(*) from core_programarea;\n# shows 9 rows\n\ndelete from core_programarea;\n# DELETE 9\n\nselect count(*) from core_programarea;\n# shows 0 rows\n\n# ctrl-d to exit dbshell\n</code></pre> </li> </ol>"},{"location":"contributing/howto/create-initial-data-migrations/#combine-script-in-migration","title":"Combine Script in Migration","text":"<ul> <li> <p>Look for name of the last migration file in <code>core/data/migrations</code> directory</p> </li> <li> <p>Create a script in the same directory named <code>&lt;number&gt;_&lt;modelname_in_lower_case&gt;_seed.py</code> with the following contents and     replace <code>&lt;modelname_in_lower_case&gt;</code>, <code>ModelNameInPascalCase</code>, and <code>&lt;name of last script&gt;</code> with appropriate values:</p> <pre><code>from django.db import migrations\n\nfrom core.models import ModelNameInPascalCase\n\n\ndef forward(__code__, __reverse_code__):\n    # paste everything in seed script's run function here\n    # remove pass below\n    pass\n\n\ndef reverse(__code__, __reverse_code__):\n    ModelNameInPascalCase.objects.all().delete()\n\n\nclass Migration(migrations.Migration):\n    dependencies = [(\"data\", \"&lt;name of last script, or contents of max_migration.txt&gt;\")]\n\n    operations = [migrations.RunPython(forward, reverse)]\n</code></pre> <p>For example:</p> <pre><code>from django.db import migrations\n\nfrom core.models import BookType\n\n\ndef forward(__code__, __reverse_code__):\n    items = [\n        (1, \"Hard Cover\"),\n        (2, \"Soft Cover\"),\n    ]\n    for uuid, name in items:\n        BookType.objects.create(uuid=uuid, name=name)\n\n\ndef reverse(__code__, __reverse_code__):\n    BookType.objects.all().delete()\n\n\nclass Migration(migrations.Migration):\n    dependencies = [(\"data\", \"0011_author_seed\")]\n\n    operations = [migrations.RunPython(forward, reverse)]\n</code></pre> </li> </ul> <p>In this example <code>011_author_seed</code> is the name of the last migration file in <code>core/data/migrations</code>. You will also need to update this to the last python file in <code>core/data/migrations</code> having the format <code>xxxx_&lt;modename_in_lower_case&gt;_seed.py</code>.</p>"},{"location":"contributing/howto/generate-db-table-description/","title":"Generate database table description","text":"<p>Note</p> <p>This guide works only for the postgres database running locally in a Docker container.</p>","tags":["database","postgres"]},{"location":"contributing/howto/generate-db-table-description/#short-way-single-command","title":"Short way (single command)","text":"<p>(Optional) Get all table names</p> <p>This is helpful for getting a list of table names to use in the next command.</p> <pre><code>./scripts/db.sh -c \"\\dt\"\n</code></pre> <ol> <li> <p>Get table description</p> <p>This command prints the table description to the terminal.</p> <pre><code>./scripts/db.sh -c \"\\d &lt;table_name&gt;\"\n</code></pre> <p>Example table name: <code>core_user</code></p> <pre><code>./scripts/db.sh -c \"\\d core_user\"\n</code></pre> </li> </ol>","tags":["database","postgres"]},{"location":"contributing/howto/generate-db-table-description/#long-way-interactive","title":"Long way (interactive)","text":"<ol> <li> <p>Enter the database shell in the docker container (\\q to exit)</p> <pre><code>./scripts/db.sh\n</code></pre> </li> <li> <p>Get list of tables</p> <pre><code>\\dt\n</code></pre> </li> <li> <p>Get table description</p> <pre><code>\\d &lt;table_name&gt;\n</code></pre> </li> </ol>","tags":["database","postgres"]},{"location":"contributing/howto/generate-db-table-description/#when-to-use-this","title":"When to use this","text":"<ul> <li>It's useful to generate the latest table description in text format for verification after making updates to a table.</li> </ul>","tags":["database","postgres"]},{"location":"contributing/howto/generate-db-table-description/#who-should-use-this","title":"Who should use this","text":"<ul> <li>Developers</li> </ul>","tags":["database","postgres"]},{"location":"contributing/howto/run-local/","title":"Run backend in venv","text":"<p>If you have a requirement to run on your local machine or you are unable to get it to work on Docker, do the following steps. WARNING: If you run into issues you will get limited support.</p> <p>Run these commands from the <code>app</code> directory:</p> <ol> <li>Copy <code>.env.docker-example</code> to <code>.env.local</code></li> <li>Inspect <code>.env.local</code> and change values as appropriate. The file includes instructions on how to use local <code>postgres</code> and <code>sqlite</code> for the database. <code>sqlite</code> has no set up. It uses a file <code>db.sqlite3</code>. If it is not there, it automatically creates it.</li> <li>Mac only: If you have a Mac, the python command may not be found and scripts will fail. Try to run python using the \"python\" command from the terminal. If you get an error that the python command is     not found, type: <code>alias python=\"python3\"</code></li> <li>Run these commands from the terminal in the project root.</li> </ol> <pre><code>cd app\n\n# copy the env file\ncp .env.docker-example .env.local\n\n# create a virtual environment\npython -m venv venv\n\n# activate (enter) the virtual environment\nsource venv/bin/activate\n# install dependencies\npip install -r requirements.txt\n\n# start local server\n../scripts/start-local.sh\n# start server with alternate port\n# DJANGO_PORT=8001 ../scripts/start-local.sh\n\n# browse to http://localhost:8000 (or 8001) to see the app\n\n# Ctrl-C to stop the server\n\n# deactivate (exit) the virtual environment\n# to return to the system global environment\ndeactivate\n</code></pre> <p>TIP: Look up <code>direnv</code> for a useful method to automatically enter and exit virtual environments based on the current directory.</p>"},{"location":"contributing/onboarding/ERD/","title":"Updating the ERD","text":"<p>This page outlines how to view, edit, and propose changes to the People Depot entity relationship diagram (ERD), which is managed using dbdiagram.io.</p>","tags":["Onboarding"]},{"location":"contributing/onboarding/ERD/#purpose","title":"\ud83d\udccc Purpose","text":"<p>To ensure database schema edits are collaborative, auditable, and synchronized with the source of truth, all edits must go through GitHub via a structured process described below.</p>","tags":["Onboarding"]},{"location":"contributing/onboarding/ERD/#viewing-the-live-erd","title":"\ud83d\udd0d Viewing the Live ERD","text":"<p>To view the current version of the ERD:</p> <ul> <li>Visit: Live ERD (dbdiagram.io) \u2192 link</li> </ul> <p>Note</p> <p>\ud83d\udcdd You do not need an account to view the ERD</p>","tags":["Onboarding"]},{"location":"contributing/onboarding/ERD/#how-to-propose-changes-to-the-erd","title":"\u270f\ufe0f How to Propose Changes to the ERD","text":"<p>All edits must be submitted via pull request using the steps below.</p> <ol> <li> <p>Fork the Repository</p> <ol> <li>Navigate to the People Depot GitHub repo</li> <li>Click Fork</li> </ol> <p>Note</p> <p>Ensure your fork is up-to-date before making changes</p> </li> <li> <p>Copy the Schema Source</p> <ol> <li>Locate the file: <code>schema.dbml</code> in the root folder</li> <li>Copy the entire contents of the file</li> </ol> </li> <li> <p>Make edits on dbdiagram.io (Your Account)</p> <ol> <li>Sign in to dbdiagram.io using your own free account</li> <li>Create a new diagram</li> <li>Paste the contents of <code>schema.dbml</code> into the editor</li> <li>Make your proposed changes using DBML syntax</li> <li>Ensure the diagram renders correctly</li> </ol> </li> <li> <p>Export Updated Schema</p> <ul> <li>Once edits are complete and validated visually:<ol> <li>Click Export</li> <li>Choose DBML</li> <li>Save the file as <code>schema.dbml</code></li> </ol> </li> </ul> </li> <li> <p>Commit &amp; Push Changes</p> <ul> <li>In your forked repo:<ol> <li>Replace the original <code>schema.dbml</code> file with your updated version</li> <li>Commit your changes with a descriptive message (e.g., <code>Add table for program milestones</code>)</li> <li>Push to your fork</li> </ol> </li> </ul> </li> <li> <p>Submit a Pull Request</p> <ol> <li>Open a PR from your fork to the <code>main</code> branch of <code>PeopleDepot</code></li> <li>Title your PR descriptively (e.g., <code>Update ERD to include new Program table</code>)</li> <li>In the PR body, explain:<ol> <li>What you changed</li> <li>Why you changed it</li> <li>Anything reviewers should double-check (e.g., table relationships, naming consistency)</li> </ol> </li> </ol> </li> </ol>","tags":["Onboarding"]},{"location":"contributing/onboarding/ERD/#after-your-pr-is-merged","title":"\u2705 After Your PR Is Merged","text":"<p>Once your PR is approved and merged:</p> <ol> <li>A maintainer will manually update the official ERD on dbdiagram.io under the <code>PeopleDepot@hackforla.org</code> account using your submitted <code>schema.dbml</code> file.</li> <li>The Live ERD link will reflect your changes shortly after.</li> </ol> <p>Note</p> <p>You will not be given access to the shared dbdiagram.io account.</p> <p>All official updates are uploaded by maintainers.</p>","tags":["Onboarding"]},{"location":"contributing/onboarding/ERD/#tips-and-conventions","title":"\ud83d\udee0 Tips and Conventions","text":"<ul> <li>Use clear, singular table names (e.g., <code>Person</code>, not <code>People</code>)</li> <li>Always define primary keys and foreign keys</li> <li>Maintain consistent naming conventions (e.g., <code>snake_case</code> or <code>camelCase</code>, as established)</li> <li>Include comments in DBML for any complex relationships or logic</li> </ul>","tags":["Onboarding"]},{"location":"contributing/onboarding/ERD/#resources","title":"\ud83e\udde0 Resources","text":"<ul> <li>\ud83d\udcd6 DBML Syntax Reference</li> <li>\ud83d\udcd8 ERD Best Practices</li> </ul>","tags":["Onboarding"]},{"location":"contributing/onboarding/code/","title":"Updating Code","text":"","tags":["Onboarding"]},{"location":"contributing/onboarding/code/#create-a-new-branch","title":"Create a new branch","text":"<p>Once you have selected an issue to work on, create a branch for that issue.</p> <p>Verify you are on the <code>main</code> branch.</p> <pre><code>git branch\n</code></pre> <p>You will see a list of all of your branches. There will be a star (<code>*</code>) next to the branch that you are currently in. By default you should start on the <code>main</code> branch.</p> <p>If you are not currently in the <code>main</code> branch, run the following command to return to it:</p> <pre><code>git checkout main\n</code></pre> <pre><code>git pull origin main\n</code></pre> <p>This ensures you have the most recent code, which is important if you previously cloned and it has been more than a day.</p> <p>Create a new branch where you will work on the issue. The branch name should include the issue number. For example, to create a new branch for issue 15 and change into it:</p> <pre><code>git checkout -b &lt;new-branch-name&gt;-15\n</code></pre>","tags":["Onboarding"]},{"location":"contributing/onboarding/code/#make-changes","title":"Make changes","text":"<p>Make changes to fix the issue.</p>","tags":["Onboarding"]},{"location":"contributing/onboarding/code/#pull-to-get-the-most-recent-code","title":"Pull to get the most recent code","text":"<p>You can probably skip this if you fix the issue on the same day that you pulled the code.</p> <pre><code>git pull\n</code></pre> <p>If you are using Visual studios code you can use the Git graphical user interface to stage your changes. For instructions check out the Git GUI page in the website Wiki</p>","tags":["Onboarding"]},{"location":"contributing/onboarding/code/#add-changed-files-to-staging","title":"Add changed files to staging","text":"<p>Make sure you are on your issue branch (instead of <code>main</code>)</p> <pre><code>git branch\n</code></pre> <p>You must add your files to the staging area before you can commit (save them to git).</p> <p>Run this command if you want to add changes from a specific file to your commit record:</p> <pre><code>git add \u201cfilename.ext\u201d\n</code></pre> <p>Run this command if you want to add all changes to all file(s) to your commit record:</p> <pre><code>git add .\n</code></pre>","tags":["Onboarding"]},{"location":"contributing/onboarding/code/#check-git-status","title":"Check Git status","text":"<p>This command will list the files that have been staged with green text. These are the files that will be committed (saved) when you run the next command, <code>git commit</code>. Please be sure all your staged changes are relevant to the issue you are working on. If you accidentally included unrelated changes, please unstage them before making this commit, and then make a new commit for the unrelated changes. (The commands for unstaging commits are provided in the output of your <code>git status</code> command.)</p> <pre><code>git status\n</code></pre>","tags":["Onboarding"]},{"location":"contributing/onboarding/code/#remove-files-that-you-dont-want-staged","title":"Remove files that you don't want staged","text":"<p>This command will unstage a file that you don't want included in the commit. The specified file will not be committed (saved) when you run the next command, <code>git commit</code>. This only works if the wrong files were added, but they were not yet committed. (See this tutorial for an in-depth discussion.) The file will be removed from the staging area, but not actually deleted:</p> <pre><code>git reset HEAD \u201cfilename.ext\u201d\n</code></pre>","tags":["Onboarding"]},{"location":"contributing/onboarding/code/#commit-staged-changes","title":"Commit staged changes","text":"<p>This command saves your work, and prepares it to push to your repository. Use the <code>-m</code> flag to quickly add a message to your commit. Your message should be a short description of the changes you made. It will be extremely helpful if other people can understand your message, so try to resist the temptation to be overly cryptic.</p> <p>To commit your changes with a message, run:</p> <pre><code>git commit -m \u201cinsert message here\u201d\n</code></pre> <p>Ensure that your local repository is up-to-date with the main site:</p> <pre><code>git pull upstream\n</code></pre> <p>You can also sync your fork directly on GitHub by clicking \"Sync Fork\" at the right of the screen and then clicking \"Update Branch\"</p>","tags":["Onboarding"]},{"location":"contributing/onboarding/code/#push-to-upstream-origin-aka-your-fork","title":"Push to upstream origin (aka, your fork)","text":"<p>Push your local branch to your remote repository:</p> <pre><code>git push --set-upstream origin &lt;your-branch-name&gt;\n</code></pre> <p>Alternatively, you can run</p> <pre><code>git push\n</code></pre>","tags":["Onboarding"]},{"location":"contributing/onboarding/code/#create-a-pull-request","title":"Create a pull request","text":"","tags":["Onboarding"]},{"location":"contributing/onboarding/code/#push-all-changes-in-your-issue-branch","title":"Push all changes in your issue branch","text":"<p>Once you are satisfied with your changes, push them to the feature branch you made within your remote repository.</p> <pre><code>git push --set-upstream origin &lt;name-of-branch&gt;\n</code></pre>","tags":["Onboarding"]},{"location":"contributing/onboarding/code/#complete-pull-request-from-github","title":"Complete pull request from GitHub","text":"<ol> <li>Click the green button to create a Pull Request (PR)</li> <li>Add a short title in the subject line</li> <li>In the body of the comment, add the following, replacing <code>&lt;issue-number&gt;</code> with the issue you worked on:</li> </ol> <pre><code>fixes #&lt;issue-number&gt;\n</code></pre> <ol> <li>Below this, add a brief description of the changes you made</li> <li>Click the green \"Create pull request\" button</li> <li>Add the PR to the project board</li> </ol>","tags":["Onboarding"]},{"location":"contributing/onboarding/dev_environment/","title":"Development Environment","text":"<p>Please reach out in the People Depot Slack channel if you have trouble setting up your development environment</p>","tags":["Onboarding"]},{"location":"contributing/onboarding/dev_environment/#pre-requisites","title":"Pre-requisites","text":"","tags":["Onboarding"]},{"location":"contributing/onboarding/dev_environment/#github-account","title":"GitHub account","text":"<p>See here for creating a GitHub account. If you are not familiar with Git, this tutorial is recommended.</p>","tags":["Onboarding"]},{"location":"contributing/onboarding/dev_environment/#two-factor-authentication","title":"Two-factor authentication","text":"<p>Set up two-factor authentication on your account by following this guide.</p>","tags":["Onboarding"]},{"location":"contributing/onboarding/dev_environment/#text-editor","title":"Text editor","text":"<p>VS Code is recommended, but feel free to use a text editor of your choice.</p>","tags":["Onboarding"]},{"location":"contributing/onboarding/dev_environment/#install-git","title":"Install Git","text":"<p>Before cloning your forked repository to your local machine, you must have Git installed. You can find instructions for installing Git for your operating system here.</p> WindowsMac <ul> <li> <p>we recommend installing Windows Subsystem for Linux (WSL). WSL provides a Linux-compatible environment that can prevent common errors during script execution.</p> </li> <li> <p>After setting up WSL, install Git directly from the Linux terminal. This method can help avoid complications that sometimes arise when using Git Bash on Windows.</p> </li> <li> <p>If you prefer Git Bash or encounter errors related to line endings when running scripts, the problem might be due to file conversions in Windows. To address this, configure Git as follows:</p> <pre><code>git config --system set autocrlf=false\n</code></pre> </li> </ul> <p>Please note that if you have a Mac the page offers several options (see other option, if you need to conserve hard drive space) including:</p> <ul> <li>an \u201ceasiest\u201d option (this version is fine for our use): This option would take just over 4GB.</li> <li>a \u201cmore up to date\u201d option (not required but optional if you want it): This option prompts you to go to install an 8GB package manager called Homebrew.</li> <li>Other option: If your computer is low on space, you can use this tutorial to install XCode Command Tools and a lighter version of Homebrew and then install Git using this command: <code>$ brew install git</code> which in total only uses 300MB.</li> </ul>","tags":["Onboarding"]},{"location":"contributing/onboarding/dev_environment/#install-docker","title":"Install Docker","text":"<p>Install or make sure docker and docker compose are installed on your computer.</p> <pre><code>docker -v\ndocker compose -v\n</code></pre> <p>The recommended installation method for your operating system can be found here.</p> <p>More on using Docker and the concepts of containerization:</p> <ul> <li>Get started with Docker</li> </ul>","tags":["Onboarding"]},{"location":"contributing/onboarding/dev_environment/#install-pre-commit","title":"Install pre-commit","text":"<p>This will check your changes for common problems.</p> <p>See the Pre-commit page for installation instructions.</p> <p>For consistency, an automated bot will perform the same checks on the repository side when you open a pull request.</p>","tags":["Onboarding"]},{"location":"contributing/onboarding/dev_environment/#fork-the-repository","title":"Fork the repository","text":"<p>You can fork the hackforla/peopledepot repository by clicking   Fork . A fork is a copy of the repository that will be placed on your GitHub account.</p> <p>It should create a URL that looks like the following -&gt; <code>https://github.com/&lt;your_GitHub_user_name&gt;/peopledepot</code></p> <p>For example -&gt; <code>https://github.com/octocat/peopledepot</code></p> <p>What you have created is a forked copy in a remote version on GitHub. It is not on your local machine yet</p>","tags":["Onboarding"]},{"location":"contributing/onboarding/dev_environment/#clone-a-copy-on-your-computer","title":"Clone a copy on your computer","text":"<p>The following steps will clone (create) a local copy of the forked repository on your computer.</p> <ol> <li> <p>Create a new folder in your computer that will contain <code>hackforla</code> projects.</p> <p>In your command line interface (Terminal, Git Bash, Powershell), move to where you want your new folder to be placed and create a new folder in your computer that will contain <code>hackforla</code> projects. After that, navigate into the folder(directory) you just created.</p> <p>For example:</p> <pre><code>cd /projects\nmkdir hackforla\ncd hackforla\n</code></pre> </li> <li> <p>From the hackforla directory created in previous section:</p> <pre><code>git clone https://github.com/&lt;your_GitHub_user_name&gt;/peopledepot.git\n</code></pre> <p>For example if your GitHub username was <code>octocat</code>:</p> <pre><code>git clone https://github.com/octocat/peopledepot.git\n</code></pre> <p>You can also clone using ssh which is more secure but requires more setup. Because of the additional setup, cloning using https as shown above is recommended</p> </li> </ol> <p>You should now have a new folder in your <code>hackforla</code> folder called <code>peopledepot</code>. Verify this by changing into the new directory:</p> <pre><code>cd peopledepot\n</code></pre>","tags":["Onboarding"]},{"location":"contributing/onboarding/dev_environment/#verify-and-set-up-remote-references","title":"Verify and set up remote references","text":"<p>Verify that your local cloned repository is pointing to the correct <code>origin</code> URL (that is, the forked repo on your own GitHub account):</p> <pre><code>git remote -v\n</code></pre> <p>You should see <code>fetch</code> and <code>push</code> URLs with links to your forked repository under your account (i.e. <code>https://github.com/&lt;your_GitHub_user_name&gt;/peopledepot.git</code>). You are all set to make working changes to the project on your local machine.</p> <p>However, we still need a way to keep our local repo up to date with the deployed project. To do so, you must add an upstream remote to incorporate changes made while you are working on your local repo. Run the following to add an upstream remote URL &amp; update your local repo with recent changes to the <code>hackforla</code> version:</p> <pre><code>git remote add upstream https://github.com/hackforla/peopledepot.git\ngit fetch upstream\n</code></pre> <p>After adding the upstream remote, you should now see it if you again run <code>git remote -v</code> :</p> <pre><code>origin  https://github.com/&lt;your_GitHub_user_name&gt;/peopledepot.git (fetch)\norigin  https://github.com/&lt;your_GitHub_user_name&gt;/peopledepot.git (push)\nupstream        https://github.com/hackforla/peopledepot.git (fetch)\nupstream        https://github.com/hackforla/peopledepot.git (push)\n</code></pre>","tags":["Onboarding"]},{"location":"contributing/onboarding/dev_environment/#build-and-run-using-docker-locally","title":"Build and run using Docker locally","text":"<ol> <li> <p>Make sure the Docker service is running</p> Docker (Engine)Docker Desktop <pre><code>sudo systemctl status docker\n</code></pre> <p>It will show <code>Active: active (running)</code> if it's running.</p> <ol> <li>Start Docker Desktop</li> <li>Run <code>docker container ls</code> to verify Docker Desktop is running. If it is not running you will get the message: <code>Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</code></li> </ol> </li> <li> <p>Create an .env.docker file from .env.docker-example</p> <pre><code>cp ./app/.env.docker-example ./app/.env.docker\n</code></pre> </li> <li> <p>Build and run the project via the script (this includes running <code>docker compose up</code>)</p> <pre><code>./scripts/buildrun.sh\n</code></pre> </li> <li> <p>Create a super user for logging into the web admin interface</p> <pre><code>docker compose exec web python manage.py createsuperuser --no-input\n</code></pre> </li> <li> <p>Browse to the web admin interface at <code>http://localhost:8000/admin/</code> and confirm the admin site is running. Use DJANGO_SUPERUSER_USERNAME and DJANGO_SUPERUSER_PASSWORD from .env.docker for credentials.</p> </li> </ol> <p>See our documentation for Working with Docker for more useful Docker commands.</p>","tags":["Onboarding"]},{"location":"contributing/onboarding/documentation/","title":"Documentation","text":"<p>We highly encourage contributors to add and update documentation in the same pull request as the code. This will ensure that the docs and features are synchronized.</p> <p>Please see the MkDocs page for how to view documentation changes locally using the mkdocs in docker.</p>","tags":["Onboarding"]},{"location":"contributing/tools/","title":"Tools","text":"<p>These are the tools we use in the PeopleDepot project with notes on how we use them.</p> <ul> <li>Convenience scripts</li> <li>Docker for containerization</li> <li>MkDocs for documentation</li> <li>Pre-commit for linting</li> <li>Uv for fast dependency resolution</li> </ul>"},{"location":"contributing/tools/docker/","title":"Docker","text":""},{"location":"contributing/tools/docker/#working-with-docker","title":"Working with Docker","text":""},{"location":"contributing/tools/docker/#stopping-docker","title":"Stopping Docker","text":"<p>To stop the service-container, but not destroy it (often sufficient for day-to-day work):</p> <pre><code>docker compose stop\n</code></pre> <p>To stop and destroy the service container:</p> <pre><code>docker compose down\n</code></pre> <p>Add the <code>-v</code> flag to destroy the data volumes as well:</p> <pre><code>docker compose down -v\n</code></pre>"},{"location":"contributing/tools/docker/#recycling-refreshing-database","title":"Recycling / Refreshing Database","text":"<p>To restore a database to its original state and remove any data manually added, delete the container and image. From Docker:</p> TerminalDocker Desktop <pre><code>docker compose down -v\n</code></pre> <ol> <li>Open Containers section</li> <li>Delete people-db-1 container</li> <li>Open Images Tab</li> <li>Remove djangorestapipostrgresql image</li> </ol>"},{"location":"contributing/tools/docker/#cache-mount","title":"Cache mount","text":"<p>This helps speed up subsequent docker builds by caching intermediate files and reusing them across builds. It's available with docker buildkit. The key here is to disable anything that could delete the cache, because we want to preserve it. The cache mount is not going to end up in the docker image being built, so there's no concern about disk space usage.</p> <p>Put this flag between <code>RUN</code> and the command</p> <pre><code>RUN \\\n--mount=type=cache,target=/root/.cache\n  pip install -r requirements.txt\n</code></pre> <p>For pip, the files are by default stored in <code>/root/.cache/pip</code>. Pip caching docs</p> <p>For apk, the cache directory is <code>/var/cache/apk/</code>. APK wiki on local cache</p> <p>For apt, the cache directory is <code>/var/cache/apt/</code>.</p> References <ul> <li>buildkit mount the cache</li> <li>proper usage of mount cache</li> <li>mount cache reference</li> <li>buildkit dockerfile reference</li> </ul>"},{"location":"contributing/tools/docker/#alpine-vs-debian-based-images","title":"Alpine vs Debian based images","text":"<p>We're choosing to use an Alpine-based image for the smaller size and faster builds and downloads. However, a Debian-based image has the advantage of a large ecosystem of available packages, a limitation of Alpine that we may run up against in the future.</p>"},{"location":"contributing/tools/docker/#switching-to-debian","title":"Switching to Debian","text":"<p>Here is how we can switch to a Debian-based images if we need to:</p> <ol> <li> <p>Edit <code>Dockerfile</code> to look something like this</p> app/Dockerfile<pre><code># pull official base image\nFROM python:3.10-alpine\n# (1)! define base image\nFROM python:3.10-bullseye\n\n# set work directory\nWORKDIR /usr/src/app\n\n# set environment variables\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\nENV PYTHONPYCACHEPREFIX=/root/.cache/pycache/\nENV PIP_CACHE_DIR=/var/cache/buildkit/pip\n\nRUN mkdir -p $PIP_CACHE_DIR\n# (2)! prevent cache deletion\nRUN rm -f /etc/apt/apt.conf.d/docker-clean; \\ \necho 'Binary::apt::APT::Keep-Downloaded-Packages \"true\";' &gt; /etc/apt/apt.conf.d/keep-cache\n\n# install system dependencies\nRUN \\\n  --mount=type=cache,target=/var/cache/apk \\ \n  --mount=type=cache,target=/etc/apk/cache \\ \n  apk add \\\u0002czjqqkd:19\u0003\n  'graphviz=~9.0'\n\n# install font for graphviz\nCOPY Roboto-Regular.ttf /root/.fonts/\nRUN fc-cache -f\n# (3)! define cache mounts and install dependencies\n  --mount=type=cache,target=/var/cache/apt,sharing=locked \\ \n  --mount=type=cache,target=/var/lib/apt,sharing=locked \\ \n  apt-get update \\ \n  &amp;&amp; apt-get install --no-install-recommends -yqq \\ \n  netcat=1.10-46 \\ \n  gcc=4:10.2.1-1 \\ \n  postgresql=13+225+deb11u1 \\ \n  graphviz=2.42.2-5\n\n# install dependencies\nCOPY ./requirements.txt .\n# hadolint ignore=DL3042\n# (4)! install uv for faster dependency resolution\nRUN \\\n  --mount=type=cache,target=/root/.cache \\\n  pip install uv==0.1.15 \\\n  &amp;&amp; uv pip install --system -r requirements.txt\n\n# copy entrypoint.sh\nCOPY ./entrypoint.sh .\nRUN sed -i 's/\\r$//g' /usr/src/app/entrypoint.sh \\\n  &amp;&amp; chmod +x /usr/src/app/entrypoint.sh\n\n# copy project\nCOPY . .\n\n# run entrypoint.sh\nENTRYPOINT [\"/usr/src/app/entrypoint.sh\"]\n\n<ol>\n<li>define base image</li>\n<li>prevent cache deletion</li>\n<li>install system dependencies<ol>\n<li>define cache mounts for apt and lib</li>\n<li>install netcat for db wait script, which is used in <code>entrypoint.sh</code></li>\n<li>install gcc for python local compiling, which shouldn't be needed</li>\n<li>install postgresql for <code>dbshell</code> management command</li>\n<li>install graphviz for generating ERD in <code>erd.sh</code></li>\n</ol>\n</li>\n<li>install uv for faster dependency resolution, which may or may not be wanted</li>\n</ol>\n\n<li>\n<p>Use the <code>dive</code> tool to check the image layers for extra files that shouldn't be there.</p>\n</li>"},{"location":"contributing/tools/mkdocs/","title":"MkDocs","text":"<p>We are using MkDocs to generate our documentation. See Docker-mkdocs repo for information about MkDocs and the image we're using.</p>"},{"location":"contributing/tools/mkdocs/#work-on-docs-locally","title":"Work on docs locally","text":"<p>The first time starting the container may take longer due to downloading the ~40MB docker image</p> <ol> <li> <p>Run the mkdocs container.</p> <pre><code>docker compose up mkdocs # (1)!\n</code></pre> <ol> <li>Optionally use the <code>-d</code> flag to run the container in the background</li> </ol> </li> <li> <p>Open a browser to <code>http://localhost:8005/</code> to view the documentation locally.</p> </li> <li> <p>Modify the files in the <code>docs</code> directory. The site will auto-update when the files are saved.</p> </li> <li> <p>Ctrl+C to quit the local server and stop the container</p> </li> </ol>"},{"location":"contributing/tools/mkdocs/#auto-generated-docs","title":"Auto-generated docs","text":"<p>We have a GitHub Action set up to generate and host the documentation on a GitHub Pages site</p>"},{"location":"contributing/tools/mkdocs/#mkdocs-syntax","title":"MkDocs syntax","text":"<p>We're using Material for MkDocs. Aside from standard markdown syntax, there are some MkDocs and Material-specific syntax which can help more effective documentation. See the Material reference docs for the complete set of syntax.</p> <p>Here's a list of commonly used MkDocs syntax for quick reference.</p>"},{"location":"contributing/tools/mkdocs/#code-blocks","title":"Code Blocks","text":"ExampleCode Code Block<pre><code>@admin.register(RecurringEvent)\nclass RecurringEventAdmin(admin.ModelAdmin):\n    list_display = (\n        \"name\",\n        \"start_time\",\n        \"duration_in_min\",\n    )\n</code></pre> Numbered Lines<pre><code>@admin.register(RecurringEvent)\nclass RecurringEventAdmin(admin.ModelAdmin):\n    list_display = (\n        \"name\",\n        \"start_time\",\n        \"duration_in_min\",\n    )\n</code></pre> Highlighted Lines<pre><code>@admin.register(RecurringEvent)\nclass RecurringEventAdmin(admin.ModelAdmin):\n    list_display = (\n        \"name\",\n        \"start_time\",\n        \"duration_in_min\",\n    )\n</code></pre> <pre><code>```python title=\"Code Block\"\n@admin.register(RecurringEvent)\nclass RecurringEventAdmin(admin.ModelAdmin):\n    list_display = (\n        \"name\",\n        \"start_time\",\n        \"duration_in_min\",\n    )\n```\n\n```python title=\"Numbered Lines\" linenums=\"1\"\n@admin.register(RecurringEvent)\nclass RecurringEventAdmin(admin.ModelAdmin):\n    list_display = (\n        \"name\",\n        \"start_time\",\n        \"duration_in_min\",\n    )\n```\n\n```python title=\"Highlighted Lines\" hl_lines=\"1 3 5\"\n@admin.register(RecurringEvent)\nclass RecurringEventAdmin(admin.ModelAdmin):\n    list_display = (\n        \"name\",\n        \"start_time\",\n        \"duration_in_min\",\n    )\n```\n</code></pre>"},{"location":"contributing/tools/mkdocs/#code-annotations","title":"Code Annotations","text":"ExampleCode <pre><code>Click the plus sign --&gt; # (1)!\n</code></pre> <ol> <li>This is an explanation text</li> </ol> <pre><code>``` bash\nClick the plus sign --&gt; # (1)!\n```\n\n1. This is an explanation text\n</code></pre>"},{"location":"contributing/tools/mkdocs/#text-blocks","title":"Text blocks","text":"ExampleCode <p>Simple Block</p> <p>Example</p> <p>Content Block Text</p> Expandable Block <p>Content</p> Opened Expandable Block <p>Content</p> <pre><code>!!! example \"Simple Block\"\n\n!!! example\n    Content Block Text\n\n??? example \"Expandable Block\"\n    Content\n\n???+ example \"Opened Expandable Block\"\n    Content\n</code></pre>"},{"location":"contributing/tools/mkdocs/#tabbed-content","title":"Tabbed content","text":"ExampleCode LinuxMac <p>linux-specific content</p> <p>mac-specific content</p> <pre><code>=== \"Linux\"\n\n    linux-specific content\n\n=== \"Mac\"\n\n    mac-specific content\n</code></pre>"},{"location":"contributing/tools/mkdocs/#buttons","title":"Buttons","text":"ExampleCode <ol> <li>Ctrl+C to quit the local server and stop the container</li> </ol> <pre><code>1. ++ctrl+c++ to quit the local server and stop the container\n</code></pre>"},{"location":"contributing/tools/pre-commit/","title":"Pre-commit","text":"<p>The hooks will run when doing normal <code>git commit</code> and <code>git push</code> commands. It's recommended to do this in the command line to see the output. If performing these actions from a gui application, the interface may seem to hang for some time.</p> <p>The pre-commit checks should be fast while the pre-push hooks will take longer since they'll do a full rebuild</p>"},{"location":"contributing/tools/pre-commit/#installation","title":"Installation","text":"<p>It's recommended to install \"global\" tools via pipx, which installs packages in an isolated environment rather than the global python environment.</p> <ol> <li> <p>Install uv</p> </li> <li> <p>Install pre-commit</p> <pre><code>uv tool install pre-commit --with pre-commit-uv\n</code></pre> <p>Source guide</p> </li> <li> <p>Add the hook to git</p> <pre><code>pre-commit install\n</code></pre> <p>Pre-commit is now set up to check your files whenever you commit or push code.</p> </li> <li> <p>Test by adding an empty commit</p> <pre><code>git commit --allow-empty -m \"Test\"\n</code></pre> <p>You should see a list of tests that are all skipped, because there's no changes in the commit to test.</p> </li> </ol>"},{"location":"contributing/tools/pre-commit/#extra-information","title":"Extra information","text":"<ul> <li> <p>To skip the checks temporarily, you can do one of these</p> <pre><code># skip all the hooks\ngit commit --no-verify\n\n# skip specific hooks\nSKIP=black,flake8 git commit\n</code></pre> </li> <li> <p>Manually run the hooks (this runs it against all files rather than only changed files)</p> <pre><code>pre-commit run --all-files\n</code></pre> </li> <li> <p>More commands to run the hooks</p> <pre><code># run the hooks for the push staga\npre-commit run --all-files --hook-stage push\n\n# run the hooks for the commit stage\npre-commit run --all-files --hook-stage commit\n\n# run the hooks for\npre-commit run test --all-files --hook-stage push\n</code></pre> </li> <li> <p>Update pre-commit and plugins to the latest version</p> <pre><code>pre-commit autoupdate\n</code></pre> </li> </ul>"},{"location":"contributing/tools/pre-commit/#helpful-automations","title":"Helpful automations","text":"Autofix file line endings to LF <p>We use LF line endings since the code is designed to run on Linux. We're forcing this to happen so speed up our PR review process. Individual developers should still set up their editors to use LF line endings.</p> <p>We do this via the following lines in <code>git-commit-hooks</code>:</p> <pre><code>- id: mixed-line-ending\nargs: [--fix=lf]\nexclude: ^app/core/initial_data/\n</code></pre> <p>Note that we're excluding the initial data from this check for now since we're not decided on the correct line ending there.</p>"},{"location":"contributing/tools/pre-commit/#disabled-rules","title":"Disabled rules","text":"<p>Sometimes, we need to disable a few specific rules that are causing problems. We list them here along with information about them.</p> FLAKE8 EXE002 <p>This rule is part of flake8's flake8-executable plugin. It checks that all executable scripts have shebangs. This is to ensure that we don't create executable scripts (setting the executable bit) that we don't want to be executable (omitting the shebang).</p> <p>We disable this rule for the following reasons:</p> <ol> <li>The rule is broken for NTFS files.</li> <li>The rule is a duplicate of the <code>check-executables-have-shebangs</code> rule in the <code>pre-commit-hooks</code> repo.<ul> <li>that rule does work with NTFS by checking the repository metadata for the file, which has the correct executable bit data.</li> </ul> </li> </ol> <p>The rule works correctly in these environments:</p> <ul> <li>Windows (WSL)</li> <li>Linux</li> <li>macOS</li> </ul> <p>The rule fails under this specific combination of conditions:</p> <ol> <li>The developer is on a Windows system.</li> <li>The developer is using git bash.</li> <li>The developer cloned the repository to an NTFS directory (C:\\ or D:) rather than to a linux filesystem (under WSL).</li> </ol> <p>This rule is broken in the following way:</p> <ol> <li>It asks the operating system to check if the file is executable and checks the file for a shebang. But NTFS does not have the notion of the executable bit, and will always return <code>True</code> for all files. So files like <code>app/core/admin.py</code> that's not meant to be executable will look like they are executable, and cause the rule to fail, because it doesn't contain a shebang.</li> </ol>"},{"location":"contributing/tools/scripts/","title":"Convenience Scripts","text":"<p>These are designed to make it easier to perform various everyday tasks in the project. They try to be transparent by exposing the underlying commands they execute so that users can have an idea of what's happening and try to learn the commands if they wish.</p>"},{"location":"contributing/tools/scripts/#scripts","title":"Scripts","text":"<pre><code>scripts/\n\u251c\u2500\u2500 buildrun.sh\n\u251c\u2500\u2500 check-migrations.sh\n\u251c\u2500\u2500 createsuperuser.sh\n\u251c\u2500\u2500 db.sh\n\u251c\u2500\u2500 erd.sh\n\u251c\u2500\u2500 lint.sh\n\u251c\u2500\u2500 loadenv.sh\n\u251c\u2500\u2500 logs.sh\n\u251c\u2500\u2500 migrate.sh\n\u251c\u2500\u2500 precommit-check.sh\n\u251c\u2500\u2500 run.sh\n\u251c\u2500\u2500 start-local.sh\n\u251c\u2500\u2500 test.sh\n\u251c\u2500\u2500 update-dependencies.sh\n\u2514\u2500\u2500 validate-mkdocs.sh\n</code></pre> <p>These scripts assume you are using bash.</p> <ol> <li> <p>buildrun.sh - clean, build, and run containers in background mode</p> <ol> <li>Pass in <code>-v</code> to remove data volume, which resets the local database.</li> <li>See the script file for more options.</li> </ol> </li> <li> <p>check-migrations.sh - check if migrations are up to date</p> </li> <li> <p>createsuperuser.sh - create a default superuser</p> <ol> <li>This assumes that <code>DJANGO_SUPERUSER_USERNAME</code> and <code>DJANGO_SUPERUSER_PASSWORD</code> are set in <code>.env.docker</code></li> </ol> </li> <li> <p>db.sh - connect to the database in the <code>db</code> container</p> <ol> <li>This is a different route than <code>manage.py dbshell</code>, which requires the <code>psql</code> executable in the <code>web</code> container</li> </ol> </li> <li> <p>erd.sh - generate ER diagram</p> <ul> <li>The image is saved to <code>app/erd.png</code></li> <li>This script is dependent on the <code>graphviz</code> package</li> </ul> </li> <li> <p>lint.sh - lint and and auto-format code</p> </li> <li> <p>logs.sh - view/tail container logs</p> </li> <li> <p>migrate.sh - run database migrations inside container</p> <ol> <li>Add <code>&lt;app&gt; &lt;migration_number&gt;</code> to migrate to that database state. Ex: <code>migrate.sh core 0010</code></li> </ol> </li> <li> <p>precommit-check.sh - sanity checks before committing code</p> <ol> <li>Call <code>buildrun.sh</code>, <code>lint.sh</code>, and <code>test.sh</code></li> </ol> </li> <li> <p>run.sh - start the development server in Docker, with some options</p> <ol> <li>Pass in <code>-h</code> to show usage</li> </ol> </li> <li> <p>shell.sh - open a shell on the terminal</p> <ol> <li>Pass in <code>-h</code> to show usage</li> </ol> </li> <li> <p>test.sh - run tests and generate test coverage report</p> <ol> <li>Use the <code>-k</code> flag to filter tests. For example <code>test.sh -k program_area</code> will select only tests with \"program_area\" in the name.</li> <li>use <code>--help</code> to see other script options.</li> <li>use <code>--help-pytest</code> to see pytest options that can be added.</li> </ol> </li> <li> <p>update-dependencies.sh - update python dependencies to the latest versions</p> </li> <li> <p>validate-mkdocs.sh - validate mkdocs build for config and link issues</p> </li> </ol>"},{"location":"contributing/tools/scripts/#script-elements","title":"Script Elements","text":""},{"location":"contributing/tools/scripts/#header","title":"Header","text":"<pre><code>#!/bin/bash\nset -euo pipefail\n# IFS=$'\\n\\t'\n</code></pre> <ol> <li><code>set -euo pipefail</code> is a combination of the following<ol> <li><code>set -e</code> exits the script immediately if a command fails</li> <li><code>set -u</code> exits the script if an undefined variable is used</li> <li><code>set -o pipefail</code> exits the script if a pipe command fails</li> </ol> </li> <li><code>IFS=$'\\n\\t'</code> sets the internal field separator to newlines and tabs</li> </ol> <p>Why do we use this?</p> <ul> <li>This was the header to set up what's known as the unofficial bash strict mode, which is supposed to help people write better bash scripts.</li> <li>Some of it is outdated like the reasoning to use <code>IFS=$'\\n\\t'</code> is solved by the <code>shellcheck</code> tool.<ul> <li>There are posts warning of <code>set -e</code> not being safe in some cases.</li> <li>The <code>IFS</code> setting may not be needed since we use shellcheck to make sure variables are quoted properly.</li> <li>More link</li> </ul> </li> </ul>"},{"location":"contributing/tools/scripts/#debugging","title":"Debugging","text":"<p>We use <code>set -x</code> pairs to enable debug mode, which prints the commands that are executed in between them. The idea is to expose the underlying commands so we can learn them if we want to.</p> <pre><code>set -x\ndocker-compose exec -T web python manage.py makemigrations --check\n{ set +x; } 2&gt;&amp;-;\n</code></pre> <ol> <li><code>set -x</code> enables debug mode</li> <li><code>set +x</code> disables debug mode. Use <code>{ set +x; } 2&gt;&amp;-;</code> to hide the <code>set +x</code> from echoing to the terminal. It executes in a subshell to disable debug mode and redirects stderr to <code>/dev/null</code></li> <li>The disable command is not necessary if the script ends right away.</li> </ol>"},{"location":"contributing/tools/scripts/#script_dir","title":"SCRIPT_DIR","text":"<p>We use <code>SCRIPT_DIR=\"$(dirname \"$0\")\"</code> to get the directory of the script file, which is useful for calling other scripts in the same directory.</p> <pre><code>\"$SCRIPT_DIR\"/buildrun.sh\n</code></pre>"},{"location":"contributing/tools/scripts/#extra-arguments","title":"Extra arguments","text":"<ol> <li> <p><code>\"$@\"</code> contains all the arguments to the script</p> <pre><code>\"$SCRIPT_DIR\"/run.sh -c -o -d -b -m \"$@\"\n</code></pre> </li> <li> <p><code>\"$1\"</code> is the first argument</p> <pre><code>csv_file=$1\n</code></pre> </li> <li> <p>For example of reading commandline options, see <code>run.sh</code> and <code>test.sh</code>.</p> </li> </ol>"},{"location":"contributing/tools/uv/","title":"uv","text":"<p>We're using <code>uv</code> as a faster replacement to <code>pip</code> and <code>pip-tools</code>. See the official documentation on getting started.</p>"},{"location":"contributing/tools/uv/#how-we-use-it","title":"How we use it","text":"<p>We're using <code>uv</code> to compile and install python dependencies, which replaces the functionalities of <code>pip</code> and <code>pip-tools</code>. <code>uv</code> can also create and maintain a virtual environment but we're not using it for now. In fact, we're suppressing it with the <code>--system</code> option during <code>uv pip install</code>.</p> <p><code>uv</code> is already part of the <code>docker</code> image, so there's no need to install it on the host. It does require prepending the docker compose information to run, for example: <code>docker compose exec web uv pip compile requirements.in -o requirements.txt</code>. We'll omit the <code>docker compose exec web</code> portion from now on in this document.</p> <p><code>requirements.in</code> is the requirements file and <code>uv pip compile</code> generates <code>requirement.txt</code>, with pinned versions, similar to lock files in other languages.</p>"},{"location":"contributing/tools/uv/#installation","title":"Installation","text":"Linux (macOS/WSL)Windows <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>See the uv installation guide for more options.</p> <p>We recommend using WSL for windows since it's a Linux environment. WSL provides a Linux-compatible environment that can prevent common errors during script execution.</p> <p>Here's how to install uv on Windows.</p> <p>See the official documentation for more information.</p>"},{"location":"contributing/tools/uv/#usage","title":"Usage","text":""},{"location":"contributing/tools/uv/#install-python","title":"Install python","text":"<p><code>uv</code> can install and manage python versions if the system doesn't come with one.</p> <pre><code># install the latest python version\nuv python install\n</code></pre> <p>See the official documentation for more information.</p>"},{"location":"contributing/tools/uv/#upgrade-dependencies","title":"Upgrade dependencies","text":"<p>We shouldn't run this on every build, but we should do this manually every month/quarter or so. Be sure to re-run all tests to make sure they still pass.</p> <pre><code># docker compose exec web \\\n    uv pip compile requirements.in -o requirements.txt --no-header --upgrade\n</code></pre> <p>Or run the script</p> <pre><code>./scripts/update-dependencies.sh\n</code></pre>"},{"location":"contributing/tools/uv/#pip-compile-options","title":"pip compile options","text":"Disable header in the generated file <code>--no-header</code> This solves the problem unnecessary code churn caused by changing headers another definition Upgrade all dependencies <code>--upgrade</code> Generate pip-8 style hashes <code>--generate-hashes</code> Hashes improve security but are not verified by <code>uv</code> at the moment. It is planned. Switch back to <code>pip</code> for installation if we need to verify hashes. Disable annotation of where dependencies come from <code>--no-annotate</code> This makes the generated file shorter but less informative <p>See pip-compile docs for more options and explanation</p>"},{"location":"contributing/tools/uv/#install-dependencies","title":"Install dependencies","text":"<p>This is used in the <code>Dockerfile</code> to install python dependencies.</p> <pre><code>uv pip install --system -r requirements.txt\n</code></pre>"},{"location":"contributing/tools/uv/#pip-install-options","title":"pip install options","text":"Install to global <code>--system</code> bypass the virtual environment requirement <p>See pip install docs for more options and explanation</p>"},{"location":"contributing/tools/uv/#explanations","title":"Explanations","text":""},{"location":"contributing/tools/uv/#global-install","title":"Global install","text":"<p>We're using the <code>--system</code> option in the <code>Dockerfile</code> to bypass the virtual environment requirement for <code>uv</code>. This is because the docker image is already a virtual environment separate from the host.</p>"},{"location":"contributing/tools/uv/#version-pinning","title":"Version pinning","text":"<p>We're leaving most dependencies unpinned in <code>requirements.in</code> so that <code>pip compile</code> will pin the newest compatible versions in <code>requirements.txt</code>. The only manually pinned dependency is <code>django~=4.2.0</code>. The <code>x.2.x</code> versions have long term support, and we're using <code>4</code>, since <code>4.2</code> is the latest LTS available.</p>"},{"location":"howto/authenticate_cognito/","title":"Cognito authentication workflow (pre deployment)","text":"<p>This is a temporary solution until we can deploy a dev environment for PeopleDepot.</p> <p>There's a few manual steps and the login is good for only an hour at a time.</p> <p>Prerequisites:</p> <ul> <li>ModHeader browser extension</li> </ul> <p>Steps:</p> <ol> <li> <p>Login (or register first then login) to a cognito account here. Do not worry if you see error messages - you will be using the url.</p> <p></p> </li> <li> <p>Copy the URL when it redirects. Note: Instead of the screen below, the screen may display an error message. You can ignore any error messages.</p> <p>.</p> </li> <li> <p>Extract the <code>access_token</code> using the online tool.</p> <ol> <li>Clear the top box and paste the URL text into it. The box should show there's 1 match</li> <li>The bottom box's content is the extracted <code>access_token</code></li> </ol> <p></p> </li> <li> <p>Open ModHeader. If the icon is hidden, click on the Puzzle icon in the upper right of the browser to see it.</p> </li> <li> <p>Type the word Bearer and paste the token into ModHeader Authorization: Bearer \\ <p></p> <li> <p>Go to a page in api/v1/ to see that it allows access</p> <p></p> </li> <li> <p>Explore APIs using Swagger</p> <p></p> </li> <li> <p>Some fields have hints on how to retrieve the values.</p> <p></p> </li> <li> <p>A redoc ui is also available</p> <p></p> </li>"},{"location":"ref/api_endpoints/","title":"Api endpoints","text":"<p>We're using OpenAPI (swagger) for API documentation. We won't have a public URL for it until it's deployed. A ReDoc interface is also available.</p> <p>These are the URLs in the local dev environment</p> <ul> <li>http://localhost:8000/api/schema/swagger-ui/</li> <li>http://localhost:8000/api/schema/redoc/</li> </ul>"}]}